<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MasteryGraphQL" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkRE1ZQzhkT3pyS1l2UkpnQ3hDOFJRZzU0STdQZS05MElUYmp2ZER3dlBvIn0.eyJleHAiOjE2Njc0NzAwODcsImlhdCI6MTY2NzQ2ODg4NywiYXV0aF90aW1lIjoxNjY3NDY4ODMyLCJqdGkiOiI5ODEwNDUzMS0xYWFjLTQ5NDUtOGI4My03YTEyZTE3MmNmZWUiLCJpc3MiOiJodHRwczovL2lkLm1tMTAwbm9ucHJvZC5tYXN0ZXJtaW5kdG1zLmNvbS9hdXRoL3JlYWxtcy9kZXYubW0xMDAubWFzdGVybWluZHRtcy5jb20iLCJhdWQiOlsiaHR0cHM6Ly9kZXYubW0xMDAubWFzdGVybWluZHRtcy5jb20vIiwiYWNjb3VudCJdLCJzdWIiOiJkZmQzMDY4OS0wMmVlLTQzZjEtOWM4My01Y2U1Nzk4YWEwZGUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJodHRwczovL2Rldi5tbTEwMC5tYXN0ZXJtaW5kdG1zLmNvbS8iLCJub25jZSI6IjE1YTg3Mzc0LTY4YjItNDk3YS04MTM5LTFjZTZjNzNmZmU4MyIsInNlc3Npb25fc3RhdGUiOiI3ZjBiYTg1Ni01OWFkLTQzNmQtYjkzZC0zNTAyYmQ2OGVjMDgiLCJhY3IiOiIwIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIlN1cGVyIFVzZXIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1kZXYubW0xMDAubWFzdGVybWluZHRtcy5jb20iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBtYXN0ZXJtaW5kLXdlYi1hdWRpZW5jZSBwcm9maWxlIiwic2lkIjoiN2YwYmE4NTYtNTlhZC00MzZkLWI5M2QtMzUwMmJkNjhlYzA4IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiS2V5Y2xvYWsgU3VwZXJVc2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoia2V5Y2xvYWtzdXBlcnVzZXJAbWFzdGVyeS5uZXQiLCJnaXZlbl9uYW1lIjoiS2V5Y2xvYWsiLCJrZXljbG9ha191c2VyX2lkIjoiZGZkMzA2ODktMDJlZS00M2YxLTljODMtNWNlNTc5OGFhMGRlIiwiZmFtaWx5X25hbWUiOiJTdXBlclVzZXIiLCJlbWFpbCI6ImtleWNsb2Frc3VwZXJ1c2VyQG1hc3RlcnkubmV0In0.kpnBLzH-IlQaiOmRxpdMH4SUF9ftYwHPPDTOmh1m1lqdiApOgLFhuqZ0JBOAMqJ_br6RjFYOQt8ytmiBEyMWpWsE3bGqcXMLNKLh3z0awRxF82sv_652VlC8q1dwgd9pPZZM5RTijB9tN6qijSdgPXu2mK1DLaWyQH7LKAG11VLOx9rnIPfzxLOrKLqzJlEG6l6FOi-IlW6zRPTy5FP0VsvRDuU_Nu1nmt02UP10CYFtxGLUPbmJS1TMb9JyuakOQwbPm1qQJrHnRKtt5UI-32rKRmO6Z4L1Yu3mxz2SkoRdVr-pRELJHr_yc7mhlW1U8REWy5rbSpnk39uW7fov0A</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Tools/Project_details/Mastery_Final_GraphQL/resources/ConfigFile_1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">baseUrl,filePath,env,getLoadRouteLockV2_V1ThreadCnt,getLoadV2ThreadCnt,costDetailsV2ThreadCnt,WhoAmIV2LargeThreadCnt,loadRouteMapV2ThreadCnt,WhoAmIV2SmallThreadCnt,ExactUserThreadCnt,OperationThreadCnt,exactEmployeeThreadCnt,trackingUpdatesV4ThreadCnt,incidentsV2_V1ThreadCnt,oldSearchEmployeesV2ThreadCnt,searchEmployeesV2_V1ThreadCnt,getCustomerOrderThreadCnt,getDriverAssignmentByRouteIDThreadCnt,incidentsV2_V2ThreadCnt,getQuery_V1ThreadCnt,getEmployeeGroupByIDV2ThreadCnt,employeeThreadCnt,searchEmployeesV2_V2ThreadCnt,allCustomersForCustomerPickerV2ThreadCnt,allCustomersNullableThreadCnt,getLoadRouteLockV2_V2ThreadCnt,getLoadV2ThreadCnt,WhoAmI_V1ThreadCnt,WhoAmI_V2ThreadCnt,incidentsV2_V3ThreadCnt,getQuery_V2ThreadCnt,getQuery_V3ThreadCnt,getQuery_V4ThreadCnt,getQuery_V5ThreadCnt,allRegionsThreadCnt,seerSearchMainPageRouteBoardCountThreadCnt,availableRouteThreadCnt,getTruckMatchingDataV2ThreadCnt,calculateMileageLength_V1ThreadCnt,enrichLoadStatusEventThreadCnt,getLoadOffersTableDataThreadCnt,getEmployeeGroupByIDV2ThreadCnt,getRouteForETAV1ThreadCnt,fetchOrderForTrackingLocationUpdateV1ThreadCnt,loadV2ThreadCnt,matchesThreadCnt,calculateMileageLength_V2ThreadCnt,getOffersCountThreadCnt,fetchRouteForTrackingLocationUpdateV1ThreadCnt,getRouteStopsV2ThreadCnt,GetLoadAuditDetailsThreadCnt,getLoadStatusThreadCnt,getRateLineItemsThreadCnt,fetchAvailableRouteSummaryForMatchThreadCnt,loadNotesThreadCnt,getLoadFinancialStatusV3ThreadCnt,carrierByCodeThreadCnt,seerSearchMainPageRouteBoardThreadCnt,importLoadThreadCnt,loadV2RecordsV1ThreadCnt,allAvailableRoutesThreadCnt,fetchLoadRouteForStopEventConsumerV2ThreadCnt,carrierThreadCnt,getNextStopByRouteIDThreadCnt,allLoadRoutesForOffersV2ThreadCnt,seerSearchTrackingPageThreadCnt,getCarrierByIDThreadCnt,loadMoneySummaryThreadCnt,getLoadStatusV2ThreadCnt</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">C:/Users/swarupa.bagade/jmeter/Mastery/Project/ConfigFile.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">baseUrl,filePath,env,getLoadRouteLockV2_V1ThreadCnt,getLoadV2ThreadCnt,costDetailsV2ThreadCnt,WhoAmIV2LargeThreadCnt,loadRouteMapV2ThreadCnt,WhoAmIV2SmallThreadCnt,ExactUserThreadCnt,OperationThreadCnt,exactEmployeeThreadCnt,trackingUpdatesV4ThreadCnt,incidentsV2_V1ThreadCnt,oldSearchEmployeesV2ThreadCnt,searchEmployeesV2_V1ThreadCnt,getCustomerOrderThreadCnt,getDriverAssignmentByRouteIDThreadCnt,incidentsV2_V2ThreadCnt,getQuery_V1ThreadCnt,getEmployeeGroupByIDV2ThreadCnt,employeeThreadCnt,searchEmployeesV2_V2ThreadCnt,allCustomersForCustomerPickerV2ThreadCnt,allCustomersNullableThreadCnt,getLoadRouteLockV2_V2ThreadCnt,getLoadV2ThreadCnt,WhoAmI_V1ThreadCnt,WhoAmI_V2ThreadCnt,incidentsV2_V3ThreadCnt,getQuery_V2ThreadCnt,getQuery_V3ThreadCnt,getQuery_V4ThreadCnt,getQuery_V5ThreadCnt,allRegionsThreadCnt,seerSearchMainPageRouteBoardCountThreadCnt,availableRouteThreadCnt,getTruckMatchingDataV2ThreadCnt,calculateMileageLength_V1ThreadCnt,enrichLoadStatusEventThreadCnt,getLoadOffersTableDataThreadCnt,getEmployeeGroupByIDV2ThreadCnt,getRouteForETAV1ThreadCnt,fetchOrderForTrackingLocationUpdateV1ThreadCnt,loadV2ThreadCnt,matchesThreadCnt,calculateMileageLength_V2ThreadCnt,getOffersCountThreadCnt,fetchRouteForTrackingLocationUpdateV1ThreadCnt,getRouteStopsV2ThreadCnt,GetLoadAuditDetailsThreadCnt,getLoadStatusThreadCnt,getRateLineItemsThreadCnt,fetchAvailableRouteSummaryForMatchThreadCnt,loadNotesThreadCnt,getLoadFinancialStatusV3ThreadCnt,carrierByCodeThreadCnt,seerSearchMainPageRouteBoardThreadCnt,importLoadThreadCnt,loadV2RecordsV1ThreadCnt,allAvailableRoutesThreadCnt,fetchLoadRouteForStopEventConsumerV2ThreadCnt,carrierThreadCnt,getNextStopByRouteIDThreadCnt,allLoadRoutesForOffersV2ThreadCnt,seerSearchTrackingPageThreadCnt,getCarrierByIDThreadCnt,loadMoneySummaryThreadCnt,getLoadStatusV2ThreadCnt</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">dev.mm100.mastermindtms.com-thundercats</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">3778684a-4521-416c-9792-b33ab9c228c9</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">id.mm100nonprod.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/realms/dev.mm100.mastermindtms.com/protocol/openid-connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Scope.variable">access_token</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(access_token, ${access_token})};
//${__setProperty(baseUrl, ${baseUrl})};
//${__setProperty(filePath, ${filePath})};
//${__setProperty(env, ${env})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Login Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">600000</stringProp>
        </TestAction>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getLoadRouteLockV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getLoadRouteLockV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">loadID </stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>1505.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getLoadRouteLockV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment LockInfo on Lock { __typename expirationTimestamp flavor id objectID ownerV2 { __typename email employee { __typename fullName id } id } } query getLoadRouteLockV2($id: ID!) { loadV2(id: $id) { __typename id routes { __typename id lock { __typename ...LockInfo } } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;id&quot;:&quot;${loadID}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment LockInfo on Lock {
  __typename
  expirationTimestamp
  flavor
  id
  objectID
  ownerV2 {
    __typename
    email
    employee {
      __typename
      fullName
      id
    }
    id
  }
}
query getLoadRouteLockV2($id: ID!) {
  loadV2(id: $id) {
    __typename
    id
    routes {
      __typename
      id
      lock {
        __typename
        ...LockInfo
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot;:&quot;${loadID}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getLoad" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Tools/Project_details/Mastery_Final_GraphQL/resources/getloadV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>780.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getLoadV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;id&quot;: &quot;${id}&quot;
},&quot;query&quot;:&quot;fragment AccountingOrderInfo on Order {\n  __typename\n  id\n  isInvoiceRequirementBypassed\n  taxExempt\n}\nfragment AppointmentV2ForCCAInfo on AppointmentV2 {\n  __typename\n  confirmed\n  id\n  requestedEnd {\n    __typename\n    timezone\n    value\n  }\n  requestedStart {\n    __typename\n    timezone\n    value\n  }\n  requestedTimeRange {\n    __typename\n    endOffsetMs\n    id\n    startOffsetMs\n  }\n  status\n}\nfragment AppointmentV2Info on AppointmentV2 {\n  __typename\n  autoSchedule\n  changedByV2 {\n    __typename\n    employeeDisplayName\n    id\n  }\n  confirmed\n  createdAt\n  id\n  requestedEnd {\n    __typename\n    timezone\n    value\n  }\n  requestedStart {\n    __typename\n    timezone\n    value\n  }\n  requestedTimeRange {\n    __typename\n    endOffsetMs\n    id\n    startOffsetMs\n  }\n  status\n  updatedAt\n}\nfragment BookingSource on RouteVendorV2 {\n  __typename\n  bookingSource {\n    __typename\n    id\n    name\n  }\n}\nfragment BounceInfoV2 on BounceV2 {\n  __typename\n  active\n  bounceReason {\n    __typename\n    active\n    description\n    id\n    name\n  }\n  bounceType {\n    __typename\n    active\n    description\n    id\n    name\n  }\n  createdAt\n  createdByUserV2 {\n    __typename\n    employee {\n      __typename\n      ...EmployeeSimpleV2\n    }\n    id\n  }\n  id\n  notes\n  rebooked\n  rebookedAt\n  rebookedByUserV2 {\n    __typename\n    employee {\n      __typename\n      ...EmployeeSimpleV2\n    }\n    id\n  }\n  routeVendor {\n    __typename\n    id\n    routeVendorCost {\n      __typename\n      totalCost\n    }\n    vendorV2 {\n      __typename\n      id\n      name\n    }\n    vendorType\n  }\n}\nfragment CarrierAddressBrief on CarrierAddress {\n  __typename\n  addressType {\n    __typename\n    ...KeyValueInfo\n  }\n  addressTypeId\n  carrierId\n  city\n  country\n  createdAt\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  isVerified\n  main\n  postalCode\n  riskInfoSource\n  state\n  street1\n  street2\n  thirdPartyId\n  updatedAt\n}\nfragment CarrierContactInfo on CarrierContact {\n  __typename\n  chatType {\n    __typename\n    ...KeyValueInfo\n  }\n  chatTypeId\n  chatUsername\n  contactTypeId\n  emailAddress\n  extension\n  faxNumber\n  id\n  main\n  main\n  name\n  phoneNumber\n  riskInfoSource\n  thirdPartyId\n}\nfragment CarrierCustomerRelationshipInfoV2 on CarrierCustomerRelationshipV2 {\n  __typename\n  active\n  bypassCompliance\n  canLoad\n  carrier {\n    __typename\n    code\n    id\n    name\n  }\n  createdAt\n  createdBy {\n    __typename\n    employee {\n      __typename\n      firstName\n      id\n      lastName\n    }\n  }\n  customer {\n    __typename\n    id\n    name\n  }\n  id\n  notes {\n    __typename\n    id\n    noteType\n    text\n  }\n  relationshipType\n  updatedAt\n  updatedBy {\n    __typename\n    employee {\n      __typename\n      firstName\n      id\n      lastName\n    }\n  }\n}\nfragment CarrierElectronictrackingInfo on CarrierElectronicTracking {\n  __typename\n  electronicTrackingMethod {\n    __typename\n    id\n    name\n  }\n  electronicTrackingMethodId\n  electronicTrackingType {\n    __typename\n    id\n    name\n  }\n  electronicTrackingTypeId\n  id\n  priority\n}\nfragment CarrierGroupInfo on CarrierGroup {\n  __typename\n  carrierId\n  employeeDivision {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeDivisionId\n  employeeGroup {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeGroupId\n  groupType {\n    __typename\n    ...KeyValueInfo\n  }\n  groupTypeId\n  id\n}\nfragment CarrierIdentifierInfoV2 on CarrierIdentifierV2 {\n  __typename\n  carrierIdentifierTypeId\n  code\n  id\n  link\n}\nfragment CarrierInfoV2 on CarrierV2 {\n  __typename\n  accountingNotes {\n    __typename\n    ...CarrierNoteInfo\n  }\n  accountingStatus\n  addresses {\n    __typename\n    ...CarrierAddressBrief\n  }\n  audits {\n    __typename\n    ... on CarrierRepAuditV2 {\n      __typename\n      actionType\n      auditableRep {\n        __typename\n        employee {\n          __typename\n          employeeDisplayName\n          fullName\n          id\n        }\n      }\n      createdAt\n      createdByEmployee {\n        __typename\n        employeeDisplayName\n        id\n      }\n      currentValue {\n        __typename\n        employeeId\n        main\n        repType\n      }\n      id\n      previousValue {\n        __typename\n        employeeId\n        main\n        repType\n      }\n    }\n  }\n  carrierIdentifiers {\n    __typename\n    ...CarrierIdentifierInfoV2\n  }\n  carrierPaymentTermId\n  code\n  complianceEmail\n  confirmationNotes {\n    __typename\n    ...CarrierNoteInfo\n  }\n  contacts {\n    __typename\n    ...CarrierContactInfo\n  }\n  currencyId\n  customerRelationships {\n    __typename\n    ...CarrierCustomerRelationshipInfoV2\n  }\n  dbaName\n  descendantIds\n  dotNumber\n  dunsNumber\n  electronicTrackingMethod {\n    __typename\n    ...KeyValueInfo\n  }\n  electronicTrackingType {\n    __typename\n    ...KeyValueInfo\n  }\n  electronicTrackings {\n    __typename\n    ...CarrierElectronictrackingInfo\n  }\n  entityType\n  externalStatus\n  groups {\n    __typename\n    ...CarrierGroupInfo\n  }\n  id\n  insurances {\n    __typename\n    ...CarrierInsuranceInfoV2\n  }\n  invoiceDistributionMethodId\n  mainAddress {\n    __typename\n    ...CarrierAddressBrief\n  }\n  manualTrackingInformation\n  manualTrackingMethod\n  mcNumber\n  name\n  notes\n  operatingStatus\n  parent {\n    __typename\n    code\n    id\n    name\n  }\n  paymentMethodId\n  phoneNumber\n  remitToCarrier {\n    __typename\n    code\n    id\n    name\n  }\n  remittanceAddress {\n    __typename\n    id\n  }\n  remittanceEmail\n  remittanceGrouping\n  reps {\n    __typename\n    ...RepInfoV2\n  }\n  roeStatus\n  safetyRating\n  scacNumber\n  standing {\n    __typename\n    ...CarrierStandingInfoV2\n  }\n  status\n  website\n}\nfragment CarrierInsuranceInfoV2 on CarrierInsuranceV2 {\n  __typename\n  cancelDate\n  carrierInsuranceTypeId\n  effectiveDate\n  exemptions\n  expirationDate\n  id\n  identification\n  insurer\n  limit\n  producer\n  rmisCovgId\n  underwriterRating\n}\nfragment CarrierNoteInfo on CarrierNote {\n  __typename\n  carrierId\n  createdAt\n  id\n  noteType\n  text\n  updatedAt\n}\nfragment CarrierStandingInfoV2 on CarrierStandingV2 {\n  __typename\n  notes\n  reasonCodeId\n  statusTypeId\n  typeId\n  updatedAt\n  updatedByUser {\n    __typename\n    employee {\n      __typename\n      fullName\n      id\n    }\n    id\n  }\n}\nfragment CommodityInfoV2 on CommodityV2 {\n  __typename\n  actualClass {\n    __typename\n    ...KeyValueInfo\n  }\n  actualDensity {\n    __typename\n    unit\n    value\n  }\n  actualDensityV2 {\n    __typename\n    unit\n    value\n  }\n  actualDimensions {\n    __typename\n    height(unit: in) {\n      __typename\n      unit\n      value\n    }\n    length(unit: in) {\n      __typename\n      unit\n      value\n    }\n    width(unit: in) {\n      __typename\n      unit\n      value\n    }\n  }\n  actualDimensionsV2 {\n    __typename\n    height {\n      __typename\n      unit\n      value\n    }\n    length {\n      __typename\n      unit\n      value\n    }\n    width {\n      __typename\n      unit\n      value\n    }\n  }\n  actualLinear(unit: ft) {\n    __typename\n    unit\n    value\n  }\n  actualLinearV2 {\n    __typename\n    unit\n    value\n  }\n  actualNMFCCode\n  actualPieces\n  actualVolume(unit: ft3) {\n    __typename\n    unit\n    value\n  }\n  actualVolumeV2 {\n    __typename\n    unit\n    value\n  }\n  actualWeight(unit: lbs) {\n    __typename\n    unit\n    value\n  }\n  actualWeightV2 {\n    __typename\n    unit\n    value\n  }\n  bottomLoadable\n  customerCode\n  description\n  doNotStack\n  expectedClass {\n    __typename\n    ...KeyValueInfo\n  }\n  expectedDensity {\n    __typename\n    unit\n    value\n  }\n  expectedDensityV2 {\n    __typename\n    unit\n    value\n  }\n  expectedDimensions {\n    __typename\n    height(unit: in) {\n      __typename\n      unit\n      value\n    }\n    length(unit: in) {\n      __typename\n      unit\n      value\n    }\n    width(unit: in) {\n      __typename\n      unit\n      value\n    }\n  }\n  expectedDimensionsV2 {\n    __typename\n    height {\n      __typename\n      unit\n      value\n    }\n    length {\n      __typename\n      unit\n      value\n    }\n    width {\n      __typename\n      unit\n      value\n    }\n  }\n  expectedLinear(unit: ft) {\n    __typename\n    unit\n    value\n  }\n  expectedLinearV2 {\n    __typename\n    unit\n    value\n  }\n  expectedNMFCCode\n  expectedPieces\n  expectedVolume(unit: ft3) {\n    __typename\n    unit\n    value\n  }\n  expectedVolumeV2 {\n    __typename\n    unit\n    value\n  }\n  expectedWeight(unit: lbs) {\n    __typename\n    unit\n    value\n  }\n  expectedWeightV2 {\n    __typename\n    unit\n    value\n  }\n  hazmat\n  hazmatClass {\n    __typename\n    ...KeyValueInfo\n  }\n  hazmatPackagingGroup\n  hazmatPhoneNumber\n  hazmatUnitedNationsNumber\n  id\n  loadOnType {\n    __typename\n    ...KeyValueInfo\n  }\n  make\n  maximumTemperature {\n    __typename\n    unit\n    value\n  }\n  maximumTemperatureV2 {\n    __typename\n    unit\n    value\n  }\n  minimumTemperature {\n    __typename\n    unit\n    value\n  }\n  minimumTemperatureV2 {\n    __typename\n    unit\n    value\n  }\n  model\n  orderId\n  overDimensional\n  packagingCount\n  packagingType {\n    __typename\n    ...KeyValueInfo\n  }\n  pieceType {\n    __typename\n    ...KeyValueInfo\n  }\n  preCoolTo {\n    __typename\n    unit\n    value\n  }\n  preCoolToV2 {\n    __typename\n    unit\n    value\n  }\n  serialNumbers\n  stccCode\n  temperatureControlled\n  temperatureSetting\n  topLoadable\n  year\n}\nfragment CurrencyInfo on Currency {\n  __typename\n  unit\n  value\n}\nfragment CustomerAddressBriefV2 on CustomerAddress {\n  __typename\n  addressType {\n    __typename\n    ...KeyValueInfo\n  }\n  addressTypeId\n  addressableId\n  addressableType\n  city\n  country\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  isVerified\n  main\n  postalCode\n  riskInfoSource\n  state\n  street1\n  street2\n  thirdPartyId\n}\nfragment CustomerOrderDimensionsInfo on CustomerOrderDimensions {\n  __typename\n  height(unit: in) {\n    __typename\n    unit\n    value\n  }\n  length(unit: ft) {\n    __typename\n    unit\n    value\n  }\n  width(unit: in) {\n    __typename\n    unit\n    value\n  }\n}\nfragment CustomerOrderInfoV2 on CustomerOrderV2 {\n  __typename\n  acceptedByV2 {\n    __typename\n    ...EmployeeSimpleV2\n  }\n  accountingOrder {\n    __typename\n    ...AccountingOrderInfo\n  }\n  activationStatus {\n    __typename\n    ...KeyValueInfo\n  }\n  activationStatusReason\n  billToCustomerV2 {\n    __typename\n    code\n    id\n    name\n  }\n  braceCount\n  braceTypes {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  businessUnit\n  cargoInsurance {\n    __typename\n    ...CurrencyInfo\n  }\n  code\n  commodities {\n    __typename\n    ...CommodityInfoV2\n  }\n  customerV2 {\n    __typename\n    ...LoadOrderCustomerInfoV2\n  }\n  declinedByV2 {\n    __typename\n    ...EmployeeSimpleV2\n  }\n  declinedReason {\n    __typename\n    ...KeyValueInfo\n  }\n  dimensions {\n    __typename\n    ...CustomerOrderDimensionsInfo\n  }\n  division\n  divisionV2\n  id\n  invoiceNote\n  lifeCycleStatus\n  load {\n    __typename\n    id\n  }\n  numberOfPallets\n  orderNote\n  orderedByV2 {\n    __typename\n    contactTypeId\n    id\n    name\n  }\n  patterns {\n    __typename\n    ...PatternInfo\n  }\n  paymentTerms {\n    __typename\n    ...KeyValueInfo\n  }\n  priceTier {\n    __typename\n    ...KeyValueInfo\n  }\n  project\n  projectV2\n  quoteType {\n    __typename\n    ...KeyValueInfo\n  }\n  refs {\n    __typename\n    id\n    type {\n      __typename\n      ...KeyValueInfo\n    }\n    value\n  }\n  relation {\n    __typename\n    ...KeyValueInfo\n  }\n  repsV2 {\n    __typename\n    ...CustomerOrderRepInfoV2\n  }\n  requirements {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  segmentCode\n  serviceLevel {\n    __typename\n    description\n    id\n    name\n  }\n  size {\n    __typename\n    ...KeyValueInfo\n  }\n  stops {\n    __typename\n    facilityV2 {\n      __typename\n      ...LoadOrderStopFacilityInfoV2\n    }\n    id\n    loadStopType\n  }\n  tarpCount\n  tarpType\n  tenderFromV2 {\n    __typename\n    code\n    id\n    name\n  }\n  tenderStatus {\n    __typename\n    ...KeyValueInfo\n  }\n  totalDistance(unit: mi) {\n    __typename\n    unit\n    value\n  }\n  trailerTypes {\n    __typename\n    ...KeyValueInfo\n  }\n  transportMode {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment CustomerOrderRepInfoV2 on CustomerOrderRepV2 {\n  __typename\n  employeeGroup {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeId\n  employeeOffice {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeV2 {\n    __typename\n    ...EmployeeWithNameInfoV2\n  }\n  fullName\n  id\n  main\n  type {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment CustomerSettingInfoV2 on CustomerSettingV2 {\n  __typename\n  defaultTrailerLength {\n    __typename\n    asRoundedFeet\n  }\n  doNotPostLoads\n  id\n  trailerTypes {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment DatetimeWithTimezoneInfo on DatetimeWithTimezone {\n  __typename\n  timezone\n  value\n}\nfragment EmployeeInfoV2 on EmployeeV2 {\n  __typename\n  businessUnit {\n    __typename\n    active\n    id\n    name\n  }\n  businessUnitId\n  companyEmail\n  division {\n    __typename\n    ...KeyValueInfo\n  }\n  divisionId\n  email\n  emergencyContact\n  emergencyPhone\n  employeeCompanyLevelId\n  employeeDepartmentId\n  employeeDepartmentLevelId\n  employeeDisplayName\n  employeeGenderId\n  employeeGroup {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeGroupId\n  employeeGroups {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeId\n  employeeOffice {\n    __typename\n    ...KeyValueInfo\n  }\n  employeeOfficeId\n  employeeRoleId\n  employeeShirtSizeId\n  employeeStatus {\n    __typename\n    active\n    id\n  }\n  employeeSuffixId\n  employeeTimeId\n  employeeTypeId\n  ext\n  firstName\n  firstNameDotLastName\n  fullName\n  hireDate\n  id\n  lastName\n  manager {\n    __typename\n    ...EmployeeSimpleV2\n  }\n  managerId\n  middleName\n  mobilePhone\n  nickname\n  personalEmail\n  phoneNumber\n  project {\n    __typename\n    active\n    id\n    name\n  }\n  projectId\n  relationship\n  slackName\n  subRegion\n  termDate\n  title\n  userId\n}\nfragment EmployeeSimpleV2 on EmployeeV2 {\n  __typename\n  companyEmail\n  email\n  emergencyContact\n  emergencyPhone\n  employeeDepartmentId\n  employeeDisplayName\n  employeeGenderId\n  employeeGroupId\n  employeeId\n  employeeOfficeId\n  employeeSuffixId\n  ext\n  firstName\n  fullName\n  id\n  lastName\n  managerId\n  middleName\n  nickname\n  personalEmail\n  phoneNumber\n  relationship\n  title\n  userId\n}\nfragment EmployeeWithNameInfoV2 on EmployeeV2 {\n  __typename\n  firstName\n  id\n  lastName\n  userId\n}\nfragment FacilityAddressBrief on FacilityAddress {\n  __typename\n  addressType {\n    __typename\n    ...KeyValueInfo\n  }\n  addressTypeId\n  addressTypes {\n    __typename\n    id\n  }\n  city\n  country\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  isVerified\n  main\n  postalCode\n  riskInfoSource\n  state\n  street1\n  street2\n  thirdPartyId\n}\nfragment FacilityContactInfo on FacilityContact {\n  __typename\n  chatType {\n    __typename\n    ...KeyValueInfo\n  }\n  chatTypeId\n  chatUsername\n  contactTypeId\n  emailAddress\n  extension\n  faxNumber\n  id\n  main\n  main\n  name\n  phoneNumber\n  riskInfoSource\n  thirdPartyId\n}\nfragment FacilityNoteInfo on FacilityNote {\n  __typename\n  createdAt\n  id\n  noteType\n  noteableId\n  noteableType\n  text\n  updatedAt\n}\nfragment FreightAssignmentRegionInfo on FreightAssignmentRegion {\n  __typename\n  region\n  subRegion\n  superRegion\n}\nfragment KeyValueInfo on KeyValue {\n  __typename\n  active\n  id\n  metadataJson\n  name\n}\nfragment LoadOrderCustomerInfoV2 on CustomerV2 {\n  __typename\n  accountingNotes {\n    __typename\n    id\n    noteType\n    text\n  }\n  accountsReceivableOverdue\n  addresses {\n    __typename\n    ...CustomerAddressBriefV2\n  }\n  availableCredit\n  billingAddress {\n    __typename\n    id\n  }\n  billingEmail\n  code\n  contacts {\n    __typename\n    contactTypeId\n    id\n    name\n  }\n  creditStatus\n  currencyId\n  customerStatusType {\n    __typename\n    ...KeyValueInfo\n  }\n  electronicTracking\n  id\n  insuranceCargo\n  invoiceDistributionMethodId\n  name\n  parent {\n    __typename\n    code\n    creditStatus\n    id\n    name\n  }\n  reps {\n    __typename\n    employee {\n      __typename\n      employeeGroup {\n        __typename\n        ...KeyValueInfo\n      }\n      employeeOffice {\n        __typename\n        ...KeyValueInfo\n      }\n      ...EmployeeWithNameInfoV2\n    }\n    id\n    isLoadRep\n    main\n    repType {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  settings {\n    __typename\n    ...CustomerSettingInfoV2\n  }\n  useParentCredit\n}\nfragment LoadOrderStopFacilityInfoV2 on FacilityV2 {\n  __typename\n  code\n  id\n  mainAddress {\n    __typename\n    ...FacilityAddressBrief\n  }\n  name\n}\nfragment LoadRouteInfoV2 on LoadRouteV2 {\n  __typename\n  currentStop {\n    __typename\n    ...RouteStopForStopEventsGrid\n  }\n  firstStop {\n    __typename\n    address {\n      __typename\n      city\n      id\n      state\n    }\n    availableEnd {\n      __typename\n      timezone\n      value\n    }\n    availableStart {\n      __typename\n      timezone\n      value\n    }\n    id\n    subRegion {\n      __typename\n      name\n      urn\n    }\n  }\n  lastStop {\n    __typename\n    address {\n      __typename\n      city\n      id\n      state\n    }\n    availableEnd {\n      __typename\n      timezone\n      value\n    }\n    availableStart {\n      __typename\n      timezone\n      value\n    }\n    id\n    subRegion {\n      __typename\n      name\n      urn\n    }\n  }\n  nextStop {\n    __typename\n    ...RouteStopForStopEventsGrid\n  }\n  stops {\n    __typename\n    ...LoadRouteStopInfo\n  }\n  stopsV2 {\n    __typename\n    ...LoadRouteStopInfoV2\n  }\n  ...LoadRouteSlimRouteV2\n}\nfragment LoadRouteSlimRouteV2 on LoadRouteV2 {\n  __typename\n  activationStatus {\n    __typename\n    ...KeyValueInfo\n  }\n  activationStatusReason\n  activeRouteVendors {\n    __typename\n    ...RouteVendorInfoV2\n  }\n  braceCount\n  braceTypes {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  businessUnit\n  cargoInsurance {\n    __typename\n    ...CurrencyInfo\n  }\n  code\n  dimensions {\n    __typename\n    ...RouteDimensionsInfo\n  }\n  division\n  divisionV2\n  expectedMaxWeight(unit: lbs) {\n    __typename\n    unit\n    value\n  }\n  freightAssignmentInboundRegion\n  freightAssignmentOutboundRegion\n  hotRoute\n  id\n  inboundRegion {\n    __typename\n    ...RegionInfo\n  }\n  lifeCycleStatus\n  maxCost {\n    __typename\n    ...RouteMaxCostInfo\n  }\n  outboundRegion {\n    __typename\n    ...RegionInfo\n  }\n  postings {\n    __typename\n    active\n    id\n    postedRate {\n      __typename\n      value\n    }\n  }\n  projectV2\n  requirements {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  routeType\n  routeVendors {\n    __typename\n    ...RouteVendorInfoV2\n  }\n  segmentCode\n  sequence\n  size {\n    __typename\n    ...KeyValueInfo\n  }\n  tarpCount\n  tarpType\n  totalDistance(unit: mi) {\n    __typename\n    unit\n    value\n  }\n  trailerTypes {\n    __typename\n    ...KeyValueInfo\n  }\n  transportMode {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment LoadRouteStopFacilityInfoV2 on FacilityV2 {\n  __typename\n  addresses {\n    __typename\n    ...FacilityAddressBrief\n  }\n  code\n  contacts {\n    __typename\n    ...FacilityContactInfo\n  }\n  customerFacilities {\n    __typename\n    customerId\n    facilityId\n    id\n    isAutoScheduleDefault\n    isAutoScheduleEligible\n    schedulingSystem\n  }\n  externalNotes {\n    __typename\n    ...FacilityNoteInfo\n  }\n  facilityLoadDefaults {\n    __typename\n    autoSchedDefault\n    autoSchedEligible\n    facilityId\n    id\n    schedSystem\n  }\n  facilityNote\n  id\n  loadFromType {\n    __typename\n    ...KeyValueInfo\n  }\n  mainAddress {\n    __typename\n    ...FacilityAddressBrief\n  }\n  name\n  schedules {\n    __typename\n    ...ScheduleInfoV2\n  }\n  schedulingContact\n  schedulingSystemType {\n    __typename\n    ...KeyValueInfo\n  }\n  status\n  timezone\n  unloadFromType {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment LoadRouteStopInfo on RouteStop {\n  __typename\n  address {\n    __typename\n    ...StopAddressInfo\n  }\n  appointment {\n    __typename\n    ...AppointmentV2Info\n  }\n  appointments {\n    __typename\n    ...AppointmentV2Info\n  }\n  apptConfBy\n  apptReqWith\n  availableEnd {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  availableEndTimes {\n    __typename\n    ...StopRange\n  }\n  availableStart {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  availableStartTimes {\n    __typename\n    ...StopRange\n  }\n  bolNumber\n  commodities {\n    __typename\n    ...CommodityInfoV2\n  }\n  computedCurrentAppointment {\n    __typename\n    ...AppointmentV2ForCCAInfo\n  }\n  distanceToNext(unit: mi) {\n    __typename\n    unit\n    value\n  }\n  facilityV2 {\n    __typename\n    ...LoadRouteStopFacilityInfoV2\n  }\n  freightAssignmentRegion {\n    __typename\n    ...FreightAssignmentRegionInfo\n  }\n  id\n  isOrderStop\n  liveType\n  loadFrom {\n    __typename\n    ...KeyValueInfo\n  }\n  loadStopType\n  note\n  numberOfPallets\n  orderStopId\n  refs {\n    __typename\n    id\n    type {\n      __typename\n      ...KeyValueInfo\n    }\n    value\n  }\n  reqDate {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  requirements {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  scheduleType\n  schedulingLog {\n    __typename\n    ...SchedulingLogInfo\n  }\n  sealNumber\n  stopEventsV2 {\n    __typename\n    eventSubTypeDatetime\n    eventSubTypeID\n    eventSubTypeTimezone\n    eventTypeID\n    id\n  }\n  trackingAutoETADatetime\n  trackingAutoETAUsesDataScienceFormula\n  trackingManualETADatetime\n  type\n  unloadFrom {\n    __typename\n    ...KeyValueInfo\n  }\n  workType\n}\nfragment LoadRouteStopInfoV2 on RouteStopV2 {\n  __typename\n  address {\n    __typename\n    ...StopAddressInfoV2\n  }\n  appointment {\n    __typename\n    ...AppointmentV2Info\n  }\n  appointments {\n    __typename\n    ...AppointmentV2Info\n  }\n  apptConfBy\n  apptReqWith\n  availableEnd {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  availableEndTimes {\n    __typename\n    ...StopRange\n  }\n  availableStart {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  availableStartTimes {\n    __typename\n    ...StopRange\n  }\n  bolNumber\n  commodities {\n    __typename\n    ...CommodityInfoV2\n  }\n  computedCurrentAppointment {\n    __typename\n    ...AppointmentV2ForCCAInfo\n  }\n  distanceToNext(unit: mi) {\n    __typename\n    unit\n    value\n  }\n  facilityV2 {\n    __typename\n    ...LoadRouteStopFacilityInfoV2\n  }\n  freightAssignmentRegion {\n    __typename\n    ...FreightAssignmentRegionInfo\n  }\n  id\n  isOrderStop\n  liveType\n  loadFrom {\n    __typename\n    ...KeyValueInfo\n  }\n  loadStopType\n  note\n  numberOfPallets\n  orderStopId\n  refs {\n    __typename\n    id\n    type {\n      __typename\n      ...KeyValueInfo\n    }\n    value\n  }\n  reqDate {\n    __typename\n    ...DatetimeWithTimezoneInfo\n  }\n  requirements {\n    __typename\n    option {\n      __typename\n      ...KeyValueInfo\n    }\n  }\n  scheduleType\n  schedulingLog {\n    __typename\n    ...SchedulingLogInfo\n  }\n  sealNumber\n  type\n  unloadFrom {\n    __typename\n    ...KeyValueInfo\n  }\n  workType\n}\nfragment LoadStopInfo on LoadStop {\n  __typename\n  id\n  loadId\n  orderStopIds\n  routeStopIds\n  sequence\n}\nfragment NewLoadInfoV2 on LoadV2 {\n  __typename\n  code\n  createdAt\n  id\n  note\n  orders {\n    __typename\n    ...CustomerOrderInfoV2\n  }\n  routes {\n    __typename\n    ...LoadRouteInfoV2\n  }\n  status\n  stops {\n    __typename\n    ...LoadStopInfo\n  }\n}\nfragment PatternCarrierV2Info on CarrierV2 {\n  __typename\n  id\n  name\n}\nfragment PatternCustomerV2Info on CustomerV2 {\n  __typename\n  id\n  name\n}\nfragment PatternFacilityV2Info on FacilityV2 {\n  __typename\n  code\n  id\n  mainAddress {\n    __typename\n    city\n    country\n    id\n    main\n    postalCode\n    state\n    street1\n    street2\n  }\n  name\n  status\n}\nfragment PatternInfo on Pattern {\n  __typename\n  createdOn\n  customerV2 {\n    __typename\n    ...PatternCustomerV2Info\n  }\n  effectiveDate\n  eligibleDays\n  eligibleDays\n  expirationDate\n  id\n  laneId\n  minimumPickupLeadTime\n  numberOfRoutes\n  numberOfStops\n  patternName\n  patternPriority\n  patternRoutes {\n    __typename\n    ...PatternRouteInfo\n  }\n  updatedByV2 {\n    __typename\n    employee {\n      __typename\n      firstNameDotLastName\n      id\n    }\n    id\n  }\n  updatedOn\n}\nfragment PatternRouteInfo on PatternRoute {\n  __typename\n  carrierV2 {\n    __typename\n    ...PatternCarrierV2Info\n  }\n  divisionId\n  id\n  loadSizeId\n  maxCost\n  patternStops {\n    __typename\n    ...PatternStopInfo\n  }\n  routeSequence\n  routeTypeId\n  trailerTypeId\n  transportModeId\n  vendorV2 {\n    __typename\n    ...PatternCarrierV2Info\n  }\n}\nfragment PatternStopInfo on PatternStop {\n  __typename\n  appointment {\n    __typename\n    appointmentType\n    startTime\n    stopTime\n  }\n  daysFromPreviousStop\n  dropType\n  facilityV2 {\n    __typename\n    ...PatternFacilityV2Info\n  }\n  id\n  requirements {\n    __typename\n    requirement\n  }\n  stopSequence\n  stopType\n  useOrderStopFacility\n  workType\n}\nfragment RegionInfo on Region {\n  __typename\n  name\n  parenturn\n  type\n  urn\n  urn\n}\nfragment RepInfoV2 on RepV2 {\n  __typename\n  active\n  businessUnitId\n  directionId\n  divisionId\n  employee {\n    __typename\n    ...EmployeeInfoV2\n  }\n  id\n  isLoadRep\n  main\n  modeId\n  repType\n  repTypeKeyId\n  sizeId\n}\nfragment RouteDimensionsInfo on RouteDimensions {\n  __typename\n  height(unit: in) {\n    __typename\n    unit\n    value\n  }\n  length(unit: ft) {\n    __typename\n    unit\n    value\n  }\n  width(unit: in) {\n    __typename\n    unit\n    value\n  }\n}\nfragment RouteMaxCostInfo on RouteMaxCostType {\n  __typename\n  loadId\n  maxCost\n  overMax\n  routeId\n}\nfragment RouteStopForStopEventsGrid on RouteStop {\n  __typename\n  computedCurrentAppointment {\n    __typename\n    requestedEnd {\n      __typename\n      timezone\n      value\n    }\n    requestedStart {\n      __typename\n      timezone\n      value\n    }\n    requestedTimeRange {\n      __typename\n      endOffsetMs\n      startOffsetMs\n    }\n  }\n  id\n}\nfragment RouteVendorInfoV2 on RouteVendorV2 {\n  __typename\n  bookedByV2 {\n    __typename\n    ...EmployeeSimpleV2\n  }\n  bookedWithV2 {\n    __typename\n    ...CarrierContactInfo\n  }\n  bookingNotes\n  bounced\n  bounces {\n    __typename\n    ...BounceInfoV2\n  }\n  bracingType\n  createdByV2 {\n    __typename\n    ...EmployeeSimpleV2\n  }\n  distance {\n    __typename\n    asRoundedMiles\n  }\n  expectedEmptyGeography {\n    __typename\n    id\n    name\n    sourceId\n    state\n    timezone\n  }\n  id\n  numberOfBraces\n  numberOfPallets\n  numberOfTarps\n  palletType\n  routeVendorCost {\n    __typename\n    disableFinancials\n    isVoucherRequirementBypassed\n    routeId\n    totalCost\n    vendorId\n  }\n  routeVendorReferences {\n    __typename\n    id\n    routeVendorReferenceType\n    routeVendorReferenceTypeV2\n    value\n  }\n  routeVendorReps {\n    __typename\n    ...RouteVendorRepInfoV2\n  }\n  tarpType\n  trailerHeight {\n    __typename\n    asInches\n    asRoundedInches\n  }\n  trailerHeightV2(unit: in) {\n    __typename\n    unit\n    value\n  }\n  trailerLength {\n    __typename\n    asFeet\n    asRoundedFeet\n  }\n  trailerLengthV2(unit: ft) {\n    __typename\n    unit\n    value\n  }\n  trailerType {\n    __typename\n    ...KeyValueInfo\n  }\n  trailerWidth {\n    __typename\n    asInches\n    asRoundedInches\n  }\n  trailerWidthV2(unit: in) {\n    __typename\n    unit\n    value\n  }\n  utcExpectedEmptyDatetime\n  utcPickupEtaDatetime\n  vendorType\n  vendorV2 {\n    __typename\n    ...CarrierInfoV2\n  }\n  ...BookingSource\n}\nfragment RouteVendorRepInfoV2 on RouteVendorRepV2 {\n  __typename\n  createdByUserV2 {\n    __typename\n    email\n    employee {\n      __typename\n      ...EmployeeSimpleV2\n    }\n  }\n  employeeV2 {\n    __typename\n    employeeGroup {\n      __typename\n      ...KeyValueInfo\n    }\n    employeeOffice {\n      __typename\n      ...KeyValueInfo\n    }\n    ...EmployeeSimpleV2\n  }\n  id\n  main\n  repType\n  updatedByUserV2 {\n    __typename\n    email\n    employee {\n      __typename\n      ...EmployeeSimpleV2\n    }\n    id\n  }\n}\nfragment ScheduleEntryInfoV2 on ScheduleEntryV2 {\n  __typename\n  closed\n  hours {\n    __typename\n    ...ScheduleRangeInfoV2\n  }\n  id\n}\nfragment ScheduleInfoV2 on ScheduleV2 {\n  __typename\n  appointmentType\n  dropType\n  friday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  id\n  loadSize {\n    __typename\n    ...KeyValueInfo\n  }\n  loadSizeId\n  modeType\n  monday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  routeTransportMode {\n    __typename\n    ...KeyValueInfo\n  }\n  routeTransportModeId\n  saturday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  scheduleType\n  scheduleTypeNullable\n  serviceType\n  serviceType\n  sunday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  thursday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  trailerType {\n    __typename\n    ...KeyValueInfo\n  }\n  trailerTypeId\n  trailerTypeIdNullable\n  trailerTypeNullable {\n    __typename\n    ...KeyValueInfo\n  }\n  tuesday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  wednesday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  workType\n}\nfragment ScheduleRangeInfoV2 on ScheduleRangeV2 {\n  __typename\n  endOffsetMs\n  id\n  startOffsetMs\n}\nfragment SchedulingLogInfo on SchedulingLog {\n  __typename\n  category\n  changedByV2 {\n    __typename\n    employeeDisplayName\n    id\n  }\n  createdAt\n  endDate {\n    __typename\n    timezone\n    value\n  }\n  id\n  reason\n  scheduleReason\n  startDate {\n    __typename\n    timezone\n    value\n  }\n  timeRange {\n    __typename\n    endOffsetMs\n    id\n    startOffsetMs\n  }\n  type\n}\nfragment StopAddressInfo on StopAddress {\n  __typename\n  city\n  country\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  postalCode\n  state\n  street1\n  street2\n}\nfragment StopAddressInfoV2 on StopAddressV2 {\n  __typename\n  city\n  country\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  postalCode\n  state\n  street1\n  street2\n}\nfragment StopRange on ScheduleRange {\n  __typename\n  endOffsetMs\n  id\n  startOffsetMs\n}\nquery getLoadV2($id: ID!) {\n  loadV2(id: $id) {\n    __typename\n    ...NewLoadInfoV2\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment AccountingOrderInfo on Order {
  __typename
  id
  isInvoiceRequirementBypassed
  taxExempt
}
fragment AppointmentV2ForCCAInfo on AppointmentV2 {
  __typename
  confirmed
  id
  requestedEnd {
    __typename
    timezone
    value
  }
  requestedStart {
    __typename
    timezone
    value
  }
  requestedTimeRange {
    __typename
    endOffsetMs
    id
    startOffsetMs
  }
  status
}
fragment AppointmentV2Info on AppointmentV2 {
  __typename
  autoSchedule
  changedByV2 {
    __typename
    employeeDisplayName
    id
  }
  confirmed
  createdAt
  id
  requestedEnd {
    __typename
    timezone
    value
  }
  requestedStart {
    __typename
    timezone
    value
  }
  requestedTimeRange {
    __typename
    endOffsetMs
    id
    startOffsetMs
  }
  status
  updatedAt
}
fragment BookingSource on RouteVendorV2 {
  __typename
  bookingSource {
    __typename
    id
    name
  }
}
fragment BounceInfoV2 on BounceV2 {
  __typename
  active
  bounceReason {
    __typename
    active
    description
    id
    name
  }
  bounceType {
    __typename
    active
    description
    id
    name
  }
  createdAt
  createdByUserV2 {
    __typename
    employee {
      __typename
      ...EmployeeSimpleV2
    }
    id
  }
  id
  notes
  rebooked
  rebookedAt
  rebookedByUserV2 {
    __typename
    employee {
      __typename
      ...EmployeeSimpleV2
    }
    id
  }
  routeVendor {
    __typename
    id
    routeVendorCost {
      __typename
      totalCost
    }
    vendorV2 {
      __typename
      id
      name
    }
    vendorType
  }
}
fragment CarrierAddressBrief on CarrierAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  carrierId
  city
  country
  createdAt
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
  updatedAt
}
fragment CarrierContactInfo on CarrierContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment CarrierCustomerRelationshipInfoV2 on CarrierCustomerRelationshipV2 {
  __typename
  active
  bypassCompliance
  canLoad
  carrier {
    __typename
    code
    id
    name
  }
  createdAt
  createdBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
  customer {
    __typename
    id
    name
  }
  id
  notes {
    __typename
    id
    noteType
    text
  }
  relationshipType
  updatedAt
  updatedBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
}
fragment CarrierElectronictrackingInfo on CarrierElectronicTracking {
  __typename
  electronicTrackingMethod {
    __typename
    id
    name
  }
  electronicTrackingMethodId
  electronicTrackingType {
    __typename
    id
    name
  }
  electronicTrackingTypeId
  id
  priority
}
fragment CarrierGroupInfo on CarrierGroup {
  __typename
  carrierId
  employeeDivision {
    __typename
    ...KeyValueInfo
  }
  employeeDivisionId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  groupType {
    __typename
    ...KeyValueInfo
  }
  groupTypeId
  id
}
fragment CarrierIdentifierInfoV2 on CarrierIdentifierV2 {
  __typename
  carrierIdentifierTypeId
  code
  id
  link
}
fragment CarrierInfoV2 on CarrierV2 {
  __typename
  accountingNotes {
    __typename
    ...CarrierNoteInfo
  }
  accountingStatus
  addresses {
    __typename
    ...CarrierAddressBrief
  }
  audits {
    __typename
    ... on CarrierRepAuditV2 {
      __typename
      actionType
      auditableRep {
        __typename
        employee {
          __typename
          employeeDisplayName
          fullName
          id
        }
      }
      createdAt
      createdByEmployee {
        __typename
        employeeDisplayName
        id
      }
      currentValue {
        __typename
        employeeId
        main
        repType
      }
      id
      previousValue {
        __typename
        employeeId
        main
        repType
      }
    }
  }
  carrierIdentifiers {
    __typename
    ...CarrierIdentifierInfoV2
  }
  carrierPaymentTermId
  code
  complianceEmail
  confirmationNotes {
    __typename
    ...CarrierNoteInfo
  }
  contacts {
    __typename
    ...CarrierContactInfo
  }
  currencyId
  customerRelationships {
    __typename
    ...CarrierCustomerRelationshipInfoV2
  }
  dbaName
  descendantIds
  dotNumber
  dunsNumber
  electronicTrackingMethod {
    __typename
    ...KeyValueInfo
  }
  electronicTrackingType {
    __typename
    ...KeyValueInfo
  }
  electronicTrackings {
    __typename
    ...CarrierElectronictrackingInfo
  }
  entityType
  externalStatus
  groups {
    __typename
    ...CarrierGroupInfo
  }
  id
  insurances {
    __typename
    ...CarrierInsuranceInfoV2
  }
  invoiceDistributionMethodId
  mainAddress {
    __typename
    ...CarrierAddressBrief
  }
  manualTrackingInformation
  manualTrackingMethod
  mcNumber
  name
  notes
  operatingStatus
  parent {
    __typename
    code
    id
    name
  }
  paymentMethodId
  phoneNumber
  remitToCarrier {
    __typename
    code
    id
    name
  }
  remittanceAddress {
    __typename
    id
  }
  remittanceEmail
  remittanceGrouping
  reps {
    __typename
    ...RepInfoV2
  }
  roeStatus
  safetyRating
  scacNumber
  standing {
    __typename
    ...CarrierStandingInfoV2
  }
  status
  website
}
fragment CarrierInsuranceInfoV2 on CarrierInsuranceV2 {
  __typename
  cancelDate
  carrierInsuranceTypeId
  effectiveDate
  exemptions
  expirationDate
  id
  identification
  insurer
  limit
  producer
  rmisCovgId
  underwriterRating
}
fragment CarrierNoteInfo on CarrierNote {
  __typename
  carrierId
  createdAt
  id
  noteType
  text
  updatedAt
}
fragment CarrierStandingInfoV2 on CarrierStandingV2 {
  __typename
  notes
  reasonCodeId
  statusTypeId
  typeId
  updatedAt
  updatedByUser {
    __typename
    employee {
      __typename
      fullName
      id
    }
    id
  }
}
fragment CommodityInfoV2 on CommodityV2 {
  __typename
  actualClass {
    __typename
    ...KeyValueInfo
  }
  actualDensity {
    __typename
    unit
    value
  }
  actualDensityV2 {
    __typename
    unit
    value
  }
  actualDimensions {
    __typename
    height(unit: in) {
      __typename
      unit
      value
    }
    length(unit: in) {
      __typename
      unit
      value
    }
    width(unit: in) {
      __typename
      unit
      value
    }
  }
  actualDimensionsV2 {
    __typename
    height {
      __typename
      unit
      value
    }
    length {
      __typename
      unit
      value
    }
    width {
      __typename
      unit
      value
    }
  }
  actualLinear(unit: ft) {
    __typename
    unit
    value
  }
  actualLinearV2 {
    __typename
    unit
    value
  }
  actualNMFCCode
  actualPieces
  actualVolume(unit: ft3) {
    __typename
    unit
    value
  }
  actualVolumeV2 {
    __typename
    unit
    value
  }
  actualWeight(unit: lbs) {
    __typename
    unit
    value
  }
  actualWeightV2 {
    __typename
    unit
    value
  }
  bottomLoadable
  customerCode
  description
  doNotStack
  expectedClass {
    __typename
    ...KeyValueInfo
  }
  expectedDensity {
    __typename
    unit
    value
  }
  expectedDensityV2 {
    __typename
    unit
    value
  }
  expectedDimensions {
    __typename
    height(unit: in) {
      __typename
      unit
      value
    }
    length(unit: in) {
      __typename
      unit
      value
    }
    width(unit: in) {
      __typename
      unit
      value
    }
  }
  expectedDimensionsV2 {
    __typename
    height {
      __typename
      unit
      value
    }
    length {
      __typename
      unit
      value
    }
    width {
      __typename
      unit
      value
    }
  }
  expectedLinear(unit: ft) {
    __typename
    unit
    value
  }
  expectedLinearV2 {
    __typename
    unit
    value
  }
  expectedNMFCCode
  expectedPieces
  expectedVolume(unit: ft3) {
    __typename
    unit
    value
  }
  expectedVolumeV2 {
    __typename
    unit
    value
  }
  expectedWeight(unit: lbs) {
    __typename
    unit
    value
  }
  expectedWeightV2 {
    __typename
    unit
    value
  }
  hazmat
  hazmatClass {
    __typename
    ...KeyValueInfo
  }
  hazmatPackagingGroup
  hazmatPhoneNumber
  hazmatUnitedNationsNumber
  id
  loadOnType {
    __typename
    ...KeyValueInfo
  }
  make
  maximumTemperature {
    __typename
    unit
    value
  }
  maximumTemperatureV2 {
    __typename
    unit
    value
  }
  minimumTemperature {
    __typename
    unit
    value
  }
  minimumTemperatureV2 {
    __typename
    unit
    value
  }
  model
  orderId
  overDimensional
  packagingCount
  packagingType {
    __typename
    ...KeyValueInfo
  }
  pieceType {
    __typename
    ...KeyValueInfo
  }
  preCoolTo {
    __typename
    unit
    value
  }
  preCoolToV2 {
    __typename
    unit
    value
  }
  serialNumbers
  stccCode
  temperatureControlled
  temperatureSetting
  topLoadable
  year
}
fragment CurrencyInfo on Currency {
  __typename
  unit
  value
}
fragment CustomerAddressBriefV2 on CustomerAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  addressableId
  addressableType
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment CustomerOrderDimensionsInfo on CustomerOrderDimensions {
  __typename
  height(unit: in) {
    __typename
    unit
    value
  }
  length(unit: ft) {
    __typename
    unit
    value
  }
  width(unit: in) {
    __typename
    unit
    value
  }
}
fragment CustomerOrderInfoV2 on CustomerOrderV2 {
  __typename
  acceptedByV2 {
    __typename
    ...EmployeeSimpleV2
  }
  accountingOrder {
    __typename
    ...AccountingOrderInfo
  }
  activationStatus {
    __typename
    ...KeyValueInfo
  }
  activationStatusReason
  billToCustomerV2 {
    __typename
    code
    id
    name
  }
  braceCount
  braceTypes {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  businessUnit
  cargoInsurance {
    __typename
    ...CurrencyInfo
  }
  code
  commodities {
    __typename
    ...CommodityInfoV2
  }
  customerV2 {
    __typename
    ...LoadOrderCustomerInfoV2
  }
  declinedByV2 {
    __typename
    ...EmployeeSimpleV2
  }
  declinedReason {
    __typename
    ...KeyValueInfo
  }
  dimensions {
    __typename
    ...CustomerOrderDimensionsInfo
  }
  division
  divisionV2
  id
  invoiceNote
  lifeCycleStatus
  load {
    __typename
    id
  }
  numberOfPallets
  orderNote
  orderedByV2 {
    __typename
    contactTypeId
    id
    name
  }
  patterns {
    __typename
    ...PatternInfo
  }
  paymentTerms {
    __typename
    ...KeyValueInfo
  }
  priceTier {
    __typename
    ...KeyValueInfo
  }
  project
  projectV2
  quoteType {
    __typename
    ...KeyValueInfo
  }
  refs {
    __typename
    id
    type {
      __typename
      ...KeyValueInfo
    }
    value
  }
  relation {
    __typename
    ...KeyValueInfo
  }
  repsV2 {
    __typename
    ...CustomerOrderRepInfoV2
  }
  requirements {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  segmentCode
  serviceLevel {
    __typename
    description
    id
    name
  }
  size {
    __typename
    ...KeyValueInfo
  }
  stops {
    __typename
    facilityV2 {
      __typename
      ...LoadOrderStopFacilityInfoV2
    }
    id
    loadStopType
  }
  tarpCount
  tarpType
  tenderFromV2 {
    __typename
    code
    id
    name
  }
  tenderStatus {
    __typename
    ...KeyValueInfo
  }
  totalDistance(unit: mi) {
    __typename
    unit
    value
  }
  trailerTypes {
    __typename
    ...KeyValueInfo
  }
  transportMode {
    __typename
    ...KeyValueInfo
  }
}
fragment CustomerOrderRepInfoV2 on CustomerOrderRepV2 {
  __typename
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  fullName
  id
  main
  type {
    __typename
    ...KeyValueInfo
  }
}
fragment CustomerSettingInfoV2 on CustomerSettingV2 {
  __typename
  defaultTrailerLength {
    __typename
    asRoundedFeet
  }
  doNotPostLoads
  id
  trailerTypes {
    __typename
    ...KeyValueInfo
  }
}
fragment DatetimeWithTimezoneInfo on DatetimeWithTimezone {
  __typename
  timezone
  value
}
fragment EmployeeInfoV2 on EmployeeV2 {
  __typename
  businessUnit {
    __typename
    active
    id
    name
  }
  businessUnitId
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeGroups {
    __typename
    ...KeyValueInfo
  }
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimpleV2
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  project {
    __typename
    active
    id
    name
  }
  projectId
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimpleV2 on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment EmployeeWithNameInfoV2 on EmployeeV2 {
  __typename
  firstName
  id
  lastName
  userId
}
fragment FacilityAddressBrief on FacilityAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  addressTypes {
    __typename
    id
  }
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment FacilityContactInfo on FacilityContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment FacilityNoteInfo on FacilityNote {
  __typename
  createdAt
  id
  noteType
  noteableId
  noteableType
  text
  updatedAt
}
fragment FreightAssignmentRegionInfo on FreightAssignmentRegion {
  __typename
  region
  subRegion
  superRegion
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment LoadOrderCustomerInfoV2 on CustomerV2 {
  __typename
  accountingNotes {
    __typename
    id
    noteType
    text
  }
  accountsReceivableOverdue
  addresses {
    __typename
    ...CustomerAddressBriefV2
  }
  availableCredit
  billingAddress {
    __typename
    id
  }
  billingEmail
  code
  contacts {
    __typename
    contactTypeId
    id
    name
  }
  creditStatus
  currencyId
  customerStatusType {
    __typename
    ...KeyValueInfo
  }
  electronicTracking
  id
  insuranceCargo
  invoiceDistributionMethodId
  name
  parent {
    __typename
    code
    creditStatus
    id
    name
  }
  reps {
    __typename
    employee {
      __typename
      employeeGroup {
        __typename
        ...KeyValueInfo
      }
      employeeOffice {
        __typename
        ...KeyValueInfo
      }
      ...EmployeeWithNameInfoV2
    }
    id
    isLoadRep
    main
    repType {
      __typename
      ...KeyValueInfo
    }
  }
  settings {
    __typename
    ...CustomerSettingInfoV2
  }
  useParentCredit
}
fragment LoadOrderStopFacilityInfoV2 on FacilityV2 {
  __typename
  code
  id
  mainAddress {
    __typename
    ...FacilityAddressBrief
  }
  name
}
fragment LoadRouteInfoV2 on LoadRouteV2 {
  __typename
  currentStop {
    __typename
    ...RouteStopForStopEventsGrid
  }
  firstStop {
    __typename
    address {
      __typename
      city
      id
      state
    }
    availableEnd {
      __typename
      timezone
      value
    }
    availableStart {
      __typename
      timezone
      value
    }
    id
    subRegion {
      __typename
      name
      urn
    }
  }
  lastStop {
    __typename
    address {
      __typename
      city
      id
      state
    }
    availableEnd {
      __typename
      timezone
      value
    }
    availableStart {
      __typename
      timezone
      value
    }
    id
    subRegion {
      __typename
      name
      urn
    }
  }
  nextStop {
    __typename
    ...RouteStopForStopEventsGrid
  }
  stops {
    __typename
    ...LoadRouteStopInfo
  }
  stopsV2 {
    __typename
    ...LoadRouteStopInfoV2
  }
  ...LoadRouteSlimRouteV2
}
fragment LoadRouteSlimRouteV2 on LoadRouteV2 {
  __typename
  activationStatus {
    __typename
    ...KeyValueInfo
  }
  activationStatusReason
  activeRouteVendors {
    __typename
    ...RouteVendorInfoV2
  }
  braceCount
  braceTypes {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  businessUnit
  cargoInsurance {
    __typename
    ...CurrencyInfo
  }
  code
  dimensions {
    __typename
    ...RouteDimensionsInfo
  }
  division
  divisionV2
  expectedMaxWeight(unit: lbs) {
    __typename
    unit
    value
  }
  freightAssignmentInboundRegion
  freightAssignmentOutboundRegion
  hotRoute
  id
  inboundRegion {
    __typename
    ...RegionInfo
  }
  lifeCycleStatus
  maxCost {
    __typename
    ...RouteMaxCostInfo
  }
  outboundRegion {
    __typename
    ...RegionInfo
  }
  postings {
    __typename
    active
    id
    postedRate {
      __typename
      value
    }
  }
  projectV2
  requirements {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  routeType
  routeVendors {
    __typename
    ...RouteVendorInfoV2
  }
  segmentCode
  sequence
  size {
    __typename
    ...KeyValueInfo
  }
  tarpCount
  tarpType
  totalDistance(unit: mi) {
    __typename
    unit
    value
  }
  trailerTypes {
    __typename
    ...KeyValueInfo
  }
  transportMode {
    __typename
    ...KeyValueInfo
  }
}
fragment LoadRouteStopFacilityInfoV2 on FacilityV2 {
  __typename
  addresses {
    __typename
    ...FacilityAddressBrief
  }
  code
  contacts {
    __typename
    ...FacilityContactInfo
  }
  customerFacilities {
    __typename
    customerId
    facilityId
    id
    isAutoScheduleDefault
    isAutoScheduleEligible
    schedulingSystem
  }
  externalNotes {
    __typename
    ...FacilityNoteInfo
  }
  facilityLoadDefaults {
    __typename
    autoSchedDefault
    autoSchedEligible
    facilityId
    id
    schedSystem
  }
  facilityNote
  id
  loadFromType {
    __typename
    ...KeyValueInfo
  }
  mainAddress {
    __typename
    ...FacilityAddressBrief
  }
  name
  schedules {
    __typename
    ...ScheduleInfoV2
  }
  schedulingContact
  schedulingSystemType {
    __typename
    ...KeyValueInfo
  }
  status
  timezone
  unloadFromType {
    __typename
    ...KeyValueInfo
  }
}
fragment LoadRouteStopInfo on RouteStop {
  __typename
  address {
    __typename
    ...StopAddressInfo
  }
  appointment {
    __typename
    ...AppointmentV2Info
  }
  appointments {
    __typename
    ...AppointmentV2Info
  }
  apptConfBy
  apptReqWith
  availableEnd {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  availableEndTimes {
    __typename
    ...StopRange
  }
  availableStart {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  availableStartTimes {
    __typename
    ...StopRange
  }
  bolNumber
  commodities {
    __typename
    ...CommodityInfoV2
  }
  computedCurrentAppointment {
    __typename
    ...AppointmentV2ForCCAInfo
  }
  distanceToNext(unit: mi) {
    __typename
    unit
    value
  }
  facilityV2 {
    __typename
    ...LoadRouteStopFacilityInfoV2
  }
  freightAssignmentRegion {
    __typename
    ...FreightAssignmentRegionInfo
  }
  id
  isOrderStop
  liveType
  loadFrom {
    __typename
    ...KeyValueInfo
  }
  loadStopType
  note
  numberOfPallets
  orderStopId
  refs {
    __typename
    id
    type {
      __typename
      ...KeyValueInfo
    }
    value
  }
  reqDate {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  requirements {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  scheduleType
  schedulingLog {
    __typename
    ...SchedulingLogInfo
  }
  sealNumber
  stopEventsV2 {
    __typename
    eventSubTypeDatetime
    eventSubTypeID
    eventSubTypeTimezone
    eventTypeID
    id
  }
  trackingAutoETADatetime
  trackingAutoETAUsesDataScienceFormula
  trackingManualETADatetime
  type
  unloadFrom {
    __typename
    ...KeyValueInfo
  }
  workType
}
fragment LoadRouteStopInfoV2 on RouteStopV2 {
  __typename
  address {
    __typename
    ...StopAddressInfoV2
  }
  appointment {
    __typename
    ...AppointmentV2Info
  }
  appointments {
    __typename
    ...AppointmentV2Info
  }
  apptConfBy
  apptReqWith
  availableEnd {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  availableEndTimes {
    __typename
    ...StopRange
  }
  availableStart {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  availableStartTimes {
    __typename
    ...StopRange
  }
  bolNumber
  commodities {
    __typename
    ...CommodityInfoV2
  }
  computedCurrentAppointment {
    __typename
    ...AppointmentV2ForCCAInfo
  }
  distanceToNext(unit: mi) {
    __typename
    unit
    value
  }
  facilityV2 {
    __typename
    ...LoadRouteStopFacilityInfoV2
  }
  freightAssignmentRegion {
    __typename
    ...FreightAssignmentRegionInfo
  }
  id
  isOrderStop
  liveType
  loadFrom {
    __typename
    ...KeyValueInfo
  }
  loadStopType
  note
  numberOfPallets
  orderStopId
  refs {
    __typename
    id
    type {
      __typename
      ...KeyValueInfo
    }
    value
  }
  reqDate {
    __typename
    ...DatetimeWithTimezoneInfo
  }
  requirements {
    __typename
    option {
      __typename
      ...KeyValueInfo
    }
  }
  scheduleType
  schedulingLog {
    __typename
    ...SchedulingLogInfo
  }
  sealNumber
  type
  unloadFrom {
    __typename
    ...KeyValueInfo
  }
  workType
}
fragment LoadStopInfo on LoadStop {
  __typename
  id
  loadId
  orderStopIds
  routeStopIds
  sequence
}
fragment NewLoadInfoV2 on LoadV2 {
  __typename
  code
  createdAt
  id
  note
  orders {
    __typename
    ...CustomerOrderInfoV2
  }
  routes {
    __typename
    ...LoadRouteInfoV2
  }
  status
  stops {
    __typename
    ...LoadStopInfo
  }
}
fragment PatternCarrierV2Info on CarrierV2 {
  __typename
  id
  name
}
fragment PatternCustomerV2Info on CustomerV2 {
  __typename
  id
  name
}
fragment PatternFacilityV2Info on FacilityV2 {
  __typename
  code
  id
  mainAddress {
    __typename
    city
    country
    id
    main
    postalCode
    state
    street1
    street2
  }
  name
  status
}
fragment PatternInfo on Pattern {
  __typename
  createdOn
  customerV2 {
    __typename
    ...PatternCustomerV2Info
  }
  effectiveDate
  eligibleDays
  eligibleDays
  expirationDate
  id
  laneId
  minimumPickupLeadTime
  numberOfRoutes
  numberOfStops
  patternName
  patternPriority
  patternRoutes {
    __typename
    ...PatternRouteInfo
  }
  updatedByV2 {
    __typename
    employee {
      __typename
      firstNameDotLastName
      id
    }
    id
  }
  updatedOn
}
fragment PatternRouteInfo on PatternRoute {
  __typename
  carrierV2 {
    __typename
    ...PatternCarrierV2Info
  }
  divisionId
  id
  loadSizeId
  maxCost
  patternStops {
    __typename
    ...PatternStopInfo
  }
  routeSequence
  routeTypeId
  trailerTypeId
  transportModeId
  vendorV2 {
    __typename
    ...PatternCarrierV2Info
  }
}
fragment PatternStopInfo on PatternStop {
  __typename
  appointment {
    __typename
    appointmentType
    startTime
    stopTime
  }
  daysFromPreviousStop
  dropType
  facilityV2 {
    __typename
    ...PatternFacilityV2Info
  }
  id
  requirements {
    __typename
    requirement
  }
  stopSequence
  stopType
  useOrderStopFacility
  workType
}
fragment RegionInfo on Region {
  __typename
  name
  parenturn
  type
  urn
  urn
}
fragment RepInfoV2 on RepV2 {
  __typename
  active
  businessUnitId
  directionId
  divisionId
  employee {
    __typename
    ...EmployeeInfoV2
  }
  id
  isLoadRep
  main
  modeId
  repType
  repTypeKeyId
  sizeId
}
fragment RouteDimensionsInfo on RouteDimensions {
  __typename
  height(unit: in) {
    __typename
    unit
    value
  }
  length(unit: ft) {
    __typename
    unit
    value
  }
  width(unit: in) {
    __typename
    unit
    value
  }
}
fragment RouteMaxCostInfo on RouteMaxCostType {
  __typename
  loadId
  maxCost
  overMax
  routeId
}
fragment RouteStopForStopEventsGrid on RouteStop {
  __typename
  computedCurrentAppointment {
    __typename
    requestedEnd {
      __typename
      timezone
      value
    }
    requestedStart {
      __typename
      timezone
      value
    }
    requestedTimeRange {
      __typename
      endOffsetMs
      startOffsetMs
    }
  }
  id
}
fragment RouteVendorInfoV2 on RouteVendorV2 {
  __typename
  bookedByV2 {
    __typename
    ...EmployeeSimpleV2
  }
  bookedWithV2 {
    __typename
    ...CarrierContactInfo
  }
  bookingNotes
  bounced
  bounces {
    __typename
    ...BounceInfoV2
  }
  bracingType
  createdByV2 {
    __typename
    ...EmployeeSimpleV2
  }
  distance {
    __typename
    asRoundedMiles
  }
  expectedEmptyGeography {
    __typename
    id
    name
    sourceId
    state
    timezone
  }
  id
  numberOfBraces
  numberOfPallets
  numberOfTarps
  palletType
  routeVendorCost {
    __typename
    disableFinancials
    isVoucherRequirementBypassed
    routeId
    totalCost
    vendorId
  }
  routeVendorReferences {
    __typename
    id
    routeVendorReferenceType
    routeVendorReferenceTypeV2
    value
  }
  routeVendorReps {
    __typename
    ...RouteVendorRepInfoV2
  }
  tarpType
  trailerHeight {
    __typename
    asInches
    asRoundedInches
  }
  trailerHeightV2(unit: in) {
    __typename
    unit
    value
  }
  trailerLength {
    __typename
    asFeet
    asRoundedFeet
  }
  trailerLengthV2(unit: ft) {
    __typename
    unit
    value
  }
  trailerType {
    __typename
    ...KeyValueInfo
  }
  trailerWidth {
    __typename
    asInches
    asRoundedInches
  }
  trailerWidthV2(unit: in) {
    __typename
    unit
    value
  }
  utcExpectedEmptyDatetime
  utcPickupEtaDatetime
  vendorType
  vendorV2 {
    __typename
    ...CarrierInfoV2
  }
  ...BookingSource
}
fragment RouteVendorRepInfoV2 on RouteVendorRepV2 {
  __typename
  createdByUserV2 {
    __typename
    email
    employee {
      __typename
      ...EmployeeSimpleV2
    }
  }
  employeeV2 {
    __typename
    employeeGroup {
      __typename
      ...KeyValueInfo
    }
    employeeOffice {
      __typename
      ...KeyValueInfo
    }
    ...EmployeeSimpleV2
  }
  id
  main
  repType
  updatedByUserV2 {
    __typename
    email
    employee {
      __typename
      ...EmployeeSimpleV2
    }
    id
  }
}
fragment ScheduleEntryInfoV2 on ScheduleEntryV2 {
  __typename
  closed
  hours {
    __typename
    ...ScheduleRangeInfoV2
  }
  id
}
fragment ScheduleInfoV2 on ScheduleV2 {
  __typename
  appointmentType
  dropType
  friday {
    __typename
    ...ScheduleEntryInfoV2
  }
  id
  loadSize {
    __typename
    ...KeyValueInfo
  }
  loadSizeId
  modeType
  monday {
    __typename
    ...ScheduleEntryInfoV2
  }
  routeTransportMode {
    __typename
    ...KeyValueInfo
  }
  routeTransportModeId
  saturday {
    __typename
    ...ScheduleEntryInfoV2
  }
  scheduleType
  scheduleTypeNullable
  serviceType
  serviceType
  sunday {
    __typename
    ...ScheduleEntryInfoV2
  }
  thursday {
    __typename
    ...ScheduleEntryInfoV2
  }
  trailerType {
    __typename
    ...KeyValueInfo
  }
  trailerTypeId
  trailerTypeIdNullable
  trailerTypeNullable {
    __typename
    ...KeyValueInfo
  }
  tuesday {
    __typename
    ...ScheduleEntryInfoV2
  }
  wednesday {
    __typename
    ...ScheduleEntryInfoV2
  }
  workType
}
fragment ScheduleRangeInfoV2 on ScheduleRangeV2 {
  __typename
  endOffsetMs
  id
  startOffsetMs
}
fragment SchedulingLogInfo on SchedulingLog {
  __typename
  category
  changedByV2 {
    __typename
    employeeDisplayName
    id
  }
  createdAt
  endDate {
    __typename
    timezone
    value
  }
  id
  reason
  scheduleReason
  startDate {
    __typename
    timezone
    value
  }
  timeRange {
    __typename
    endOffsetMs
    id
    startOffsetMs
  }
  type
}
fragment StopAddressInfo on StopAddress {
  __typename
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  postalCode
  state
  street1
  street2
}
fragment StopAddressInfoV2 on StopAddressV2 {
  __typename
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  postalCode
  state
  street1
  street2
}
fragment StopRange on ScheduleRange {
  __typename
  endOffsetMs
  id
  startOffsetMs
}
query getLoadV2($id: ID!) {
  loadV2(id: $id) {
    __typename
    ...NewLoadInfoV2
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot;: &quot;${id}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="costDetails" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/costDetailsV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>1120.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="costdetailsV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment CostDetailsInfoV2 on CostDetail { __typename carrierV2 { __typename id name } chargeTypeId costPer createdBy currency currencyDiscountAmount description enteredCostPer enteredTotalCost exchangeRate exchangeRateDate id isAdjustment isCredit loadId loadV2 { __typename code createdAt id routes { __typename code id } } routeId routeVendorType signedCostPer signedTotalCost statusId stopId totalCost totalCost unitsDecimal updatedBy vendorId voucherHeader { __typename adjustmentAmount id voucherNumber } } query costDetailsV2($filter: CostDetailsFilter!) { costDetails(filter: $filter) { __typename ...CostDetailsInfoV2 } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
  &quot;filter&quot;: {
    &quot;loadId&quot;: &quot;${id}&quot;
  }
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment CostDetailsInfoV2 on CostDetail {
  __typename
  carrierV2 {
    __typename
    id
    name
  }
  chargeTypeId
  costPer
  createdBy
  currency
  currencyDiscountAmount
  description
  enteredCostPer
  enteredTotalCost
  exchangeRate
  exchangeRateDate
  id
  isAdjustment
  isCredit
  loadId
  loadV2 {
    __typename
    code
    createdAt
    id
    routes {
      __typename
      code
      id
    }
  }
  routeId
  routeVendorType
  signedCostPer
  signedTotalCost
  statusId
  stopId
  totalCost
  totalCost
  unitsDecimal
  updatedBy
  vendorId
  voucherHeader {
    __typename
    adjustmentAmount
    id
    voucherNumber
  }
}
query costDetailsV2($filter: CostDetailsFilter!) {
  costDetails(filter: $filter) {
    __typename
    ...CostDetailsInfoV2
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;filter&quot;: {
    &quot;loadId&quot;: &quot;${id}&quot;
  }
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getCustomerOrderV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getCustomerOrderV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>72.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCustomerOrderV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query getCustomerOrderV2($orderId: ID!) { customerOrder(id: $orderId) { customerV2 { code electronicTrackingNumber electronicTrackingType { id } } refs { id type { id name } value } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{  
	&quot;orderId&quot;: &quot;${id}&quot;
	}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getCustomerOrderV2($orderId: ID!) {
  customerOrder(id: $orderId) {
    customerV2 {
      code
      electronicTrackingNumber
      electronicTrackingType {
        id
      }
    }
    refs {
      id
      type {
        id
        name
      }
      value
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{  
	&quot;orderId&quot;: &quot;${id}&quot;
	}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="loadRouteMapV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/loadRoutemapV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>81.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="loadRouteMapV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment LoadRouteMapInfoV2 on LoadV2 { __typename id routes { __typename id stops { __typename address { __typename ...StopAddressInfo } id } }}fragment StopAddressInfo on StopAddress { __typename city country geopoint { __typename lat lon } id postalCode state street1 street2 }query loadRouteMapV2($id: ID!) { loadV2(id: $id) { __typename ...LoadRouteMapInfoV2 }}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;id&quot;:&quot;${id}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment LoadRouteMapInfoV2 on LoadV2 {  __typename
  id
  routes {    __typename
    id
    stops {      __typename
      address {        __typename
        ...StopAddressInfo      }      id
    }  }}fragment StopAddressInfo on StopAddress {  __typename
  city
  country
  geopoint {    __typename
    lat
    lon
  }  id
  postalCode
  state
  street1
  street2
}query loadRouteMapV2($id: ID!) {  loadV2(id: $id) {    __typename
    ...LoadRouteMapInfoV2  }}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot;:&quot;${id}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="whoAmIV2Large" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>6500.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="whoAmIV2Large" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment EmployeeInfoV2 on EmployeeV2 { businessUnit { active id name } businessUnitId companyEmail division { ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { ...KeyValueInfo } employeeGroupId employeeGroups { ...KeyValueInfo } employeeId employeeOffice { ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { ...EmployeeSimpleV2 } managerId middleName mobilePhone nickname personalEmail phoneNumber project { active id name } projectId relationship slackName subRegion termDate title userId } fragment EmployeeSimpleV2 on EmployeeV2 { companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { active id metadataJson name } fragment WhoAmIDataV2 on WhoAmIV2 { employee { ...EmployeeInfoV2 } permissions { resource scopes } user { email id } } query whoAmIV2 { whoAmIV2 { ...WhoAmIDataV2 } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment EmployeeInfoV2 on EmployeeV2 {
  businessUnit {
    active
    id
    name
  }
  businessUnitId
  companyEmail
  division {
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    ...KeyValueInfo
  }
  employeeGroupId
  employeeGroups {
    ...KeyValueInfo
  }
  employeeId
  employeeOffice {
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    ...EmployeeSimpleV2
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  project {
    active
    id
    name
  }
  projectId
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimpleV2 on EmployeeV2 {
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  active
  id
  metadataJson
  name
}
fragment WhoAmIDataV2 on WhoAmIV2 {
  employee {
    ...EmployeeInfoV2
  }
  permissions {
    resource
    scopes
  }
  user {
    email
    id
  }
}
query whoAmIV2 {
  whoAmIV2 {
    ...WhoAmIDataV2
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="whoAmIV2Small" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>121.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="whoAmIV2Small" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query whoAmIV2 { whoAmIV2 { permissions { resource scopes } user { id } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query whoAmIV2 {
  whoAmIV2 {
    permissions {
      resource
      scopes
    }
    user {
      id
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="exactUser" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/exactUser.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">email</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>4.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="exactUser" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query ExactUserV2($email: String) { exactUserV2(email: $email) { id } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
    &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query ExactUserV2($email: String) {
  exactUserV2(email: $email) {
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="exactEmployeeByUserIdV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getEmployeeGroupByIDV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">firstNameLastNameOrEmail</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>106.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="exactEmployeeByUserIdV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query exactEmployeeByUserIdV2($filter: EmployeeFilterV2!) { exactEmployeeV2(filter: $filter) { __typename id } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filter&quot;: {
		&quot;firstNameLastNameOrEmail&quot;: &quot;${firstNameLastNameOrEmail}&quot;
	}
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query exactEmployeeByUserIdV2($filter: EmployeeFilterV2!) {
  exactEmployeeV2(filter: $filter) {
    __typename
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filter&quot;: {
		&quot;firstNameLastNameOrEmail&quot;: &quot;${firstNameLastNameOrEmail}&quot;
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="exactEmployee" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/exactEmployee.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">email</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>256.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="exactEmployee" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query ExactUserV2($email: String) { exactUserV2(email: $email) { id } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
    &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query ExactUserV2($email: String) {
  exactUserV2(email: $email) {
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="trackingUpdatesV4" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/trackingUpdatesV4.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">routeID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>1278.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="trackingUpdatesV4" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment AddressBrief on CarrierAddress { __typename addressType { __typename ...KeyValueInfo } addressTypeId carrierId city country geopoint { __typename lat lon } id isVerified main postalCode riskInfoSource state street1 street2 thirdPartyId } fragment CarrierCustomerRelationshipInfo on CarrierCustomerRelationshipV2 { __typename active bypassCompliance canLoad carrier { __typename code id name } createdAt createdBy { __typename employee { __typename firstName id lastName } } customer { __typename id name } id notes { __typename id noteType text } relationshipType updatedAt updatedBy { __typename employee { __typename firstName id lastName } } } fragment CarrierIdentifierInfo on CarrierIdentifierV2 { __typename carrierIdentifierTypeId code id link } fragment CarrierInfoV2 on CarrierV2 { __typename accountingNotes { __typename ...NoteInfo } accountingStatus addresses { __typename ...AddressBrief } carrierIdentifiers { __typename ...CarrierIdentifierInfo } carrierPaymentTermId code confirmationNotes { __typename ...NoteInfo } contacts { __typename ...ContactInfo } currencyId customerRelationships { __typename ...CarrierCustomerRelationshipInfo } dbaName descendantIds dotNumber dunsNumber electronicTrackingMethod { __typename ...KeyValueInfo } electronicTrackingType { __typename ...KeyValueInfo } entityType externalStatus id insurances { __typename ...CarrierInsuranceInfo } invoiceDistributionMethodId mainAddress { __typename ...AddressBrief } manualTrackingInformation manualTrackingMethod mcNumber name notes operatingStatus parent { __typename code id name } paymentMethodId phoneNumber remitToCarrier { __typename code id name } remittanceAddress { __typename id } remittanceEmail remittanceGrouping reps { __typename ...RepInfo } safetyRating scacNumber standing { __typename ...CarrierStandingInfo } status } fragment CarrierInsuranceInfo on CarrierInsuranceV2 { __typename cancelDate carrierInsuranceTypeId effectiveDate exemptions expirationDate id identification insurer limit producer rmisCovgId underwriterRating } fragment CarrierStandingInfo on CarrierStandingV2 { __typename notes reasonCodeId statusTypeId typeId updatedAt updatedByUser { __typename employee { __typename fullName id } id } } fragment ContactInfo on CarrierContact { __typename chatType { __typename ...KeyValueInfo } chatTypeId chatUsername contactTypeId emailAddress extension faxNumber id main main name phoneNumber riskInfoSource thirdPartyId } fragment EmployeeInfoV2 on EmployeeV2 { __typename companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimple } managerId middleName mobilePhone nickname personalEmail phoneNumber relationship slackName subRegion termDate title userId } fragment EmployeeSimple on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } fragment NoteInfo on CarrierNote { __typename createdAt id noteType carrierId text updatedAt } fragment RepInfo on RepV2 { __typename employee { __typename ...EmployeeInfoV2 } id isLoadRep main repType } fragment TrackingUpdateInfoV4 on TrackingUpdateV4 { __typename actionType { __typename ...KeyValueInfo } carrierV2 { __typename ...CarrierInfoV2 } checkCallDatetime createdByV2 { __typename ...EmployeeInfoV2 } createdDatetime currentLocation { __typename displayString lat lng } currentLocationAddress { __typename city country postalCode state } delayReason { __typename ...KeyValueInfo } driverElectronicTrackingTypeID driverNames etaDatetime etaTimezone id infoFrom { __typename ...KeyValueInfo } isETAManual isETAVersion1 nextLocation { __typename displayString lat lng } nextStop { __typename facility { __typename id name } id } note notifyUsersV2 { __typename employee { __typename email id userId } } route { __typename id routeType } sourceCreatedDatetime sourceCreatedTimezone trackingAutoETADatetime trackingAutoETASource trackingAutoETAUsesDataScienceFormula trackingManualETACreatedBy { __typename firstNameDotLastName } trackingManualETADatetime tractorNumber trailerNumber trailerNumber2 trailerNumber3 trailerTemp { __typename unit value } } query trackingUpdatesV4($after: String, $before: String, $filters: TrackingUpdateV4Filter, $first: Int, $last: Int) { trackingUpdatesV4( after: $after before: $before filters: $filters first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...TrackingUpdateInfoV4 } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filters&quot;:{
		&quot;routeID&quot;:&quot;${routeID}&quot;
	}
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment AddressBrief on CarrierAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  carrierId
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment CarrierCustomerRelationshipInfo on CarrierCustomerRelationshipV2 {
  __typename
  active
  bypassCompliance
  canLoad
  carrier {
    __typename
    code
    id
    name
  }
  createdAt
  createdBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
  customer {
    __typename
    id
    name
  }
  id
  notes {
    __typename
    id
    noteType
    text
  }
  relationshipType
  updatedAt
  updatedBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
}
fragment CarrierIdentifierInfo on CarrierIdentifierV2 {
  __typename
  carrierIdentifierTypeId
  code
  id
  link
}
fragment CarrierInfoV2 on CarrierV2 {
  __typename
  accountingNotes {
    __typename
    ...NoteInfo
  }
  accountingStatus
  addresses {
    __typename
    ...AddressBrief
  }
  carrierIdentifiers {
    __typename
    ...CarrierIdentifierInfo
  }
  carrierPaymentTermId
  code
  confirmationNotes {
    __typename
    ...NoteInfo
  }
  contacts {
    __typename
    ...ContactInfo
  }
  currencyId
  customerRelationships {
    __typename
    ...CarrierCustomerRelationshipInfo
  }
  dbaName
  descendantIds
  dotNumber
  dunsNumber
  electronicTrackingMethod {
    __typename
    ...KeyValueInfo
  }
  electronicTrackingType {
    __typename
    ...KeyValueInfo
  }
  entityType
  externalStatus
  id
  insurances {
    __typename
    ...CarrierInsuranceInfo
  }
  invoiceDistributionMethodId
  mainAddress {
    __typename
    ...AddressBrief
  }
  manualTrackingInformation
  manualTrackingMethod
  mcNumber
  name
  notes
  operatingStatus
  parent {
    __typename
    code
    id
    name
  }
  paymentMethodId
  phoneNumber
  remitToCarrier {
    __typename
    code
    id
    name
  }
  remittanceAddress {
    __typename
    id
  }
  remittanceEmail
  remittanceGrouping
  reps {
    __typename
    ...RepInfo
  }
  safetyRating
  scacNumber
  standing {
    __typename
    ...CarrierStandingInfo
  }
  status
}
fragment CarrierInsuranceInfo on CarrierInsuranceV2 {
  __typename
  cancelDate
  carrierInsuranceTypeId
  effectiveDate
  exemptions
  expirationDate
  id
  identification
  insurer
  limit
  producer
  rmisCovgId
  underwriterRating
}
fragment CarrierStandingInfo on CarrierStandingV2 {
  __typename
  notes
  reasonCodeId
  statusTypeId
  typeId
  updatedAt
  updatedByUser {
    __typename
    employee {
      __typename
      fullName
      id
    }
    id
  }
}
fragment ContactInfo on CarrierContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment EmployeeInfoV2 on EmployeeV2 {
  __typename
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimple
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimple on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment NoteInfo on CarrierNote {
  __typename
  createdAt
  id
  noteType
  carrierId
  text
  updatedAt
}
fragment RepInfo on RepV2 {
  __typename
  employee {
    __typename
    ...EmployeeInfoV2
  }
  id
  isLoadRep
  main
  repType
}
fragment TrackingUpdateInfoV4 on TrackingUpdateV4 {
  __typename
  actionType {
    __typename
    ...KeyValueInfo
  }
  carrierV2 {
    __typename
    ...CarrierInfoV2
  }
  checkCallDatetime
  createdByV2 {
    __typename
    ...EmployeeInfoV2
  }
  createdDatetime
  currentLocation {
    __typename
    displayString
    lat
    lng
  }
  currentLocationAddress {
    __typename
    city
    country
    postalCode
    state
  }
  delayReason {
    __typename
    ...KeyValueInfo
  }
  driverElectronicTrackingTypeID
  driverNames
  etaDatetime
  etaTimezone
  id
  infoFrom {
    __typename
    ...KeyValueInfo
  }
  isETAManual
  isETAVersion1
  nextLocation {
    __typename
    displayString
    lat
    lng
  }
  nextStop {
    __typename
    facility {
      __typename
      id
      name
    }
    id
  }
  note
  notifyUsersV2 {
    __typename
    employee {
      __typename
      email
      id
      userId
    }
  }
  route {
    __typename
    id
    routeType
  }
  sourceCreatedDatetime
  sourceCreatedTimezone
  trackingAutoETADatetime
  trackingAutoETASource
  trackingAutoETAUsesDataScienceFormula
  trackingManualETACreatedBy {
    __typename
    firstNameDotLastName
  }
  trackingManualETADatetime
  tractorNumber
  trailerNumber
  trailerNumber2
  trailerNumber3
  trailerTemp {
    __typename
    unit
    value
  }
}
query trackingUpdatesV4($after: String, $before: String, $filters: TrackingUpdateV4Filter, $first: Int, $last: Int) {
  trackingUpdatesV4(
    after: $after
    before: $before
    filters: $filters
    first: $first
    last: $last
  ) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...TrackingUpdateInfoV4
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filters&quot;:{
		&quot;routeID&quot;:&quot;${routeID}&quot;
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="incidentsV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/incidentsV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">loadID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>90.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="incidentsV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment EmployeeWithNameInfoV2 on EmployeeV2 { __typename firstName id lastName userId } fragment IncidentInfoV2 on IncidentV2 { __typename accounting claimOpenedByV2 { __typename ...EmployeeWithNameInfoV2 } claimOpenedDatetime claims closed createdDatetime customerV2 { __typename id name } description facilityV2 { __typename id name } faultParty { __typename ...KeyValueInfo } followUpDatetime gravity { __typename ...KeyValueInfo } id lastUpdatedByV2 { __typename ...EmployeeWithNameInfoV2 } lastUpdatedDatetime latestUpdateDescription latestUpdateType load { __typename id } location { __typename displayString lat lng } notifyUsersV2 { __typename ...EmployeeWithNameInfoV2 } orders { __typename ...IncidentOrderInfoV2 } routes { __typename ...IncidentRouteInfoV2 } shutdown summary type { __typename ...KeyValueInfo } updates { __typename ...IncidentUpdateInfo } vendor { __typename id vendorV2 { __typename id name } } } fragment IncidentOrderInfoV2 on CustomerOrderV2 { __typename code id } fragment IncidentRouteInfoV2 on LoadRouteV2 { __typename code firstStop { __typename address { __typename city id state } } id lastStop { __typename address { __typename city id state } } } fragment IncidentUpdateInfo on IncidentUpdate { __typename accounting claimOpenedByV2 { __typename ...EmployeeWithNameInfoV2 } claims closed createdByV2 { __typename ...EmployeeWithNameInfoV2 } createdDatetime description followUpDatetime id shutdown type } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } query incidentsV2($filters: IncidentFilterV2) { incidentsV2(filters: $filters) { __typename edges { __typename cursor node { __typename ...IncidentInfoV2 } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } totalCount } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filters&quot; : {
		&quot;loadID&quot;: &quot;${loadID}&quot;
	}
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment EmployeeWithNameInfoV2 on EmployeeV2 {
  __typename
  firstName
  id
  lastName
  userId
}
fragment IncidentInfoV2 on IncidentV2 {
  __typename
  accounting
  claimOpenedByV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  claimOpenedDatetime
  claims
  closed
  createdDatetime
  customerV2 {
    __typename
    id
    name
  }
  description
  facilityV2 {
    __typename
    id
    name
  }
  faultParty {
    __typename
    ...KeyValueInfo
  }
  followUpDatetime
  gravity {
    __typename
    ...KeyValueInfo
  }
  id
  lastUpdatedByV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  lastUpdatedDatetime
  latestUpdateDescription
  latestUpdateType
  load {
    __typename
    id
  }
  location {
    __typename
    displayString
    lat
    lng
  }
  notifyUsersV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  orders {
    __typename
    ...IncidentOrderInfoV2
  }
  routes {
    __typename
    ...IncidentRouteInfoV2
  }
  shutdown
  summary
  type {
    __typename
    ...KeyValueInfo
  }
  updates {
    __typename
    ...IncidentUpdateInfo
  }
  vendor {
    __typename
    id
    vendorV2 {
      __typename
      id
      name
    }
  }
}
fragment IncidentOrderInfoV2 on CustomerOrderV2 {
  __typename
  code
  id
}
fragment IncidentRouteInfoV2 on LoadRouteV2 {
  __typename
  code
  firstStop {
    __typename
    address {
      __typename
      city
      id
      state
    }
  }
  id
  lastStop {
    __typename
    address {
      __typename
      city
      id
      state
    }
  }
}
fragment IncidentUpdateInfo on IncidentUpdate {
  __typename
  accounting
  claimOpenedByV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  claims
  closed
  createdByV2 {
    __typename
    ...EmployeeWithNameInfoV2
  }
  createdDatetime
  description
  followUpDatetime
  id
  shutdown
  type
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
query incidentsV2($filters: IncidentFilterV2) {
  incidentsV2(filters: $filters) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...IncidentInfoV2
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filters&quot; : {
		&quot;loadID&quot;: &quot;${loadID}&quot;
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="oldSearchEmployeesV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/oldSearchEmployeesV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">emailID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>0.3</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="oldSearchEmployeesV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment EmployeeInfoV2 on EmployeeV2 { __typename businessUnit { __typename active id name } businessUnitId companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeGroups { __typename ...KeyValueInfo } employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimpleV2 } managerId middleName mobilePhone nickname personalEmail phoneNumber project { __typename active id name } projectId relationship slackName subRegion termDate title userId } fragment EmployeeSimpleV2 on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } query oldSearchEmployeesV2($limit: Int, $text: String) { employeesV2(limit: $limit, text: $text) { __typename ...EmployeeInfoV2 } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;text&quot;:&quot;${emailID}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment EmployeeInfoV2 on EmployeeV2 {
  __typename
  businessUnit {
    __typename
    active
    id
    name
  }
  businessUnitId
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeGroups {
    __typename
    ...KeyValueInfo
  }
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimpleV2
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  project {
    __typename
    active
    id
    name
  }
  projectId
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimpleV2 on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
query oldSearchEmployeesV2($limit: Int, $text: String) {
  employeesV2(limit: $limit, text: $text) {
    __typename
    ...EmployeeInfoV2
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;text&quot;:&quot;${emailID}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="searchEmployeesV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/searchEmployeesV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">firstNameLastNameOrEmail,employeeStatus</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>128.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="searchEmployeesV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment EmployeeInfoV2 on EmployeeV2 { __typename businessUnit { __typename active id name } businessUnitId companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeGroups { __typename ...KeyValueInfo } employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimpleV2 } managerId middleName mobilePhone nickname personalEmail phoneNumber project { __typename active id name } projectId relationship slackName subRegion termDate title userId } fragment EmployeeSimpleV2 on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } query searchEmployeesV2($after: String, $before: String, $filter: EmployeeFilterV2, $first: Int, $last: Int) { allEmployeesV2( after: $after before: $before filter: $filter first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...EmployeeInfoV2 } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filter&quot;: {
		&quot;firstNameLastNameOrEmail&quot;: &quot;${firstNameLastNameOrEmail}&quot;,
		&quot;employeeStatus&quot;: &quot;${employeeStatus}&quot;
	},
	&quot;first&quot;: 50
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment EmployeeInfoV2 on EmployeeV2 {
  __typename
  businessUnit {
    __typename
    active
    id
    name
  }
  businessUnitId
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeGroups {
    __typename
    ...KeyValueInfo
  }
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimpleV2
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  project {
    __typename
    active
    id
    name
  }
  projectId
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimpleV2 on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
query searchEmployeesV2($after: String, $before: String, $filter: EmployeeFilterV2, $first: Int, $last: Int) {
  allEmployeesV2(
    after: $after
    before: $before
    filter: $filter
    first: $first
    last: $last
  ) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...EmployeeInfoV2
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filter&quot;: {
		&quot;firstNameLastNameOrEmail&quot;: &quot;${firstNameLastNameOrEmail}&quot;,
		&quot;employeeStatus&quot;: &quot;${employeeStatus}&quot;
	},
	&quot;first&quot;: 50
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getDriverAssignmentByRouteID" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getDriverAssignmentByRouteID.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">routeID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>616.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getDriverAssignmentByRouteID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
&quot;routeID&quot;:&quot;${routeID}&quot;
},&quot;query&quot;:&quot;fragment DriverAssignmentInfo on DriverAssignment {\n  __typename\n  checkCallDatetime\n  dispatched\n  dispatchedBy {\n    __typename\n    displayName\n    userID\n  }\n  driver1 {\n    __typename\n    displayName\n    phoneNumber\n  }\n  driver2 {\n    __typename\n    displayName\n    phoneNumber\n  }\n  eldVehicleID\n  emptyDatetime\n  emptyLocation {\n    __typename\n    displayString\n    lat\n    lng\n  }\n  emptyTimezone\n  equipmentID\n  etaCreatedByV2 {\n    __typename\n    employee {\n      __typename\n      employeeDisplayName\n    }\n  }\n  etaDatetime\n  etaTimezone\n  hasTrackingRequestFailed\n  id\n  isETADataScienceFormula\n  nextRouteID\n  notes\n  ownerV2 {\n    __typename\n    id\n    name\n  }\n  previousRouteID\n  reloadIntent {\n    __typename\n    id\n  }\n  routeID\n  trackingEnabled\n  trackingEnabledBy {\n    __typename\n    displayName\n    userID\n  }\n  trackingStatusMessage\n  trackingSystem {\n    __typename\n    ...TrackingSystemInfo\n  }\n  tractorIdentifier\n  trailerHeight\n  trailerIdentifier\n  trailerLength\n  trailerLocation {\n    __typename\n    displayString\n    lat\n    lng\n  }\n  trailerLocationFacilityV2 {\n    __typename\n    ...FacilityInfoV2\n  }\n  trailerWidth\n  updatedByV2 {\n    __typename\n    email\n    id\n  }\n}\nfragment FacilityAddressBrief on FacilityAddress {\n  __typename\n  addressType {\n    __typename\n    ...KeyValueInfo\n  }\n  addressTypeId\n  addressTypes {\n    __typename\n    id\n  }\n  city\n  country\n  geopoint {\n    __typename\n    lat\n    lon\n  }\n  id\n  isVerified\n  main\n  postalCode\n  riskInfoSource\n  state\n  street1\n  street2\n  thirdPartyId\n}\nfragment FacilityContactInfo on FacilityContact {\n  __typename\n  chatType {\n    __typename\n    ...KeyValueInfo\n  }\n  chatTypeId\n  chatUsername\n  contactTypeId\n  emailAddress\n  extension\n  faxNumber\n  id\n  main\n  main\n  name\n  phoneNumber\n  riskInfoSource\n  thirdPartyId\n}\nfragment FacilityCustomerRelationshipInfoV2 on CustomerFacilityRelationshipV2 {\n  __typename\n  customer {\n    __typename\n    code\n    id\n    name\n  }\n  delivery\n  deliveryAvgDwellMinutes\n  deliveryCode\n  id\n  pickup\n  pickupAvgDwellMinutes\n  pickupCode\n  schedulingSystemType {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment FacilityDirectionInfo on FacilityDirection {\n  __typename\n  averageTime\n  city\n  createdAt\n  description\n  directions\n  facilityId\n  id\n  source {\n    __typename\n    ...KeyValueInfo\n  }\n  sourceId\n  state\n  updatedAt\n}\nfragment FacilityIdentifierInfoV2 on FacilityIdentifierV2 {\n  __typename\n  code\n  facilityIdentifierTypeId\n  id\n}\nfragment FacilityInfoV2 on FacilityV2 {\n  __typename\n  addresses {\n    __typename\n    ...FacilityAddressBrief\n  }\n  code\n  contacts {\n    __typename\n    ...FacilityContactInfo\n  }\n  customerRelationships {\n    __typename\n    ...FacilityCustomerRelationshipInfoV2\n  }\n  directions {\n    __typename\n    ...FacilityDirectionInfo\n  }\n  externalNotes {\n    __typename\n    ...FacilityNoteInfo\n  }\n  facilityIdentifiers {\n    __typename\n    ...FacilityIdentifierInfoV2\n  }\n  facilityNote\n  facilityType {\n    __typename\n    ...KeyValueInfo\n  }\n  id\n  loadFromType {\n    __typename\n    ...KeyValueInfo\n  }\n  mainAddress {\n    __typename\n    ...FacilityAddressBrief\n  }\n  name\n  notes {\n    __typename\n    ...FacilityNoteInfo\n  }\n  phoneNumber\n  scaleNote\n  schedules {\n    __typename\n    ...ScheduleInfoV2\n  }\n  schedulingContact\n  schedulingSystemType {\n    __typename\n    ...KeyValueInfo\n  }\n  sourceType\n  status\n  taxExempt\n  timezone\n  unloadFromType {\n    __typename\n    ...KeyValueInfo\n  }\n}\nfragment FacilityNoteInfo on FacilityNote {\n  __typename\n  createdAt\n  id\n  noteType\n  noteableId\n  noteableType\n  text\n  updatedAt\n}\nfragment KeyValueInfo on KeyValue {\n  __typename\n  active\n  id\n  metadataJson\n  name\n}\nfragment ScheduleEntryInfoV2 on ScheduleEntryV2 {\n  __typename\n  closed\n  hours {\n    __typename\n    ...ScheduleRangeInfoV2\n  }\n  id\n}\nfragment ScheduleInfoV2 on ScheduleV2 {\n  __typename\n  appointmentType\n  dropType\n  friday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  id\n  loadSize {\n    __typename\n    ...KeyValueInfo\n  }\n  loadSizeId\n  modeType\n  monday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  routeTransportMode {\n    __typename\n    ...KeyValueInfo\n  }\n  routeTransportModeId\n  saturday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  scheduleType\n  scheduleTypeNullable\n  serviceType\n  serviceType\n  sunday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  thursday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  trailerType {\n    __typename\n    ...KeyValueInfo\n  }\n  trailerTypeId\n  trailerTypeIdNullable\n  trailerTypeNullable {\n    __typename\n    ...KeyValueInfo\n  }\n  tuesday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  wednesday {\n    __typename\n    ...ScheduleEntryInfoV2\n  }\n  workType\n}\nfragment ScheduleRangeInfoV2 on ScheduleRangeV2 {\n  __typename\n  endOffsetMs\n  id\n  startOffsetMs\n}\nfragment TrackingSystemInfo on TrackingSystem {\n  __typename\n  displayName\n  id\n}\nquery getDriverAssignmentByRouteID($routeID: ID!) {\n  driverAssignmentForRoute(routeID: $routeID) {\n    __typename\n    ...DriverAssignmentInfo\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment DriverAssignmentInfo on DriverAssignment {
  __typename
  checkCallDatetime
  dispatched
  dispatchedBy {
    __typename
    displayName
    userID
  }
  driver1 {
    __typename
    displayName
    phoneNumber
  }
  driver2 {
    __typename
    displayName
    phoneNumber
  }
  eldVehicleID
  emptyDatetime
  emptyLocation {
    __typename
    displayString
    lat
    lng
  }
  emptyTimezone
  equipmentID
  etaCreatedByV2 {
    __typename
    employee {
      __typename
      employeeDisplayName
    }
  }
  etaDatetime
  etaTimezone
  hasTrackingRequestFailed
  id
  isETADataScienceFormula
  nextRouteID
  notes
  ownerV2 {
    __typename
    id
    name
  }
  previousRouteID
  reloadIntent {
    __typename
    id
  }
  routeID
  trackingEnabled
  trackingEnabledBy {
    __typename
    displayName
    userID
  }
  trackingStatusMessage
  trackingSystem {
    __typename
    ...TrackingSystemInfo
  }
  tractorIdentifier
  trailerHeight
  trailerIdentifier
  trailerLength
  trailerLocation {
    __typename
    displayString
    lat
    lng
  }
  trailerLocationFacilityV2 {
    __typename
    ...FacilityInfoV2
  }
  trailerWidth
  updatedByV2 {
    __typename
    email
    id
  }
}
fragment FacilityAddressBrief on FacilityAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  addressTypes {
    __typename
    id
  }
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment FacilityContactInfo on FacilityContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment FacilityCustomerRelationshipInfoV2 on CustomerFacilityRelationshipV2 {
  __typename
  customer {
    __typename
    code
    id
    name
  }
  delivery
  deliveryAvgDwellMinutes
  deliveryCode
  id
  pickup
  pickupAvgDwellMinutes
  pickupCode
  schedulingSystemType {
    __typename
    ...KeyValueInfo
  }
}
fragment FacilityDirectionInfo on FacilityDirection {
  __typename
  averageTime
  city
  createdAt
  description
  directions
  facilityId
  id
  source {
    __typename
    ...KeyValueInfo
  }
  sourceId
  state
  updatedAt
}
fragment FacilityIdentifierInfoV2 on FacilityIdentifierV2 {
  __typename
  code
  facilityIdentifierTypeId
  id
}
fragment FacilityInfoV2 on FacilityV2 {
  __typename
  addresses {
    __typename
    ...FacilityAddressBrief
  }
  code
  contacts {
    __typename
    ...FacilityContactInfo
  }
  customerRelationships {
    __typename
    ...FacilityCustomerRelationshipInfoV2
  }
  directions {
    __typename
    ...FacilityDirectionInfo
  }
  externalNotes {
    __typename
    ...FacilityNoteInfo
  }
  facilityIdentifiers {
    __typename
    ...FacilityIdentifierInfoV2
  }
  facilityNote
  facilityType {
    __typename
    ...KeyValueInfo
  }
  id
  loadFromType {
    __typename
    ...KeyValueInfo
  }
  mainAddress {
    __typename
    ...FacilityAddressBrief
  }
  name
  notes {
    __typename
    ...FacilityNoteInfo
  }
  phoneNumber
  scaleNote
  schedules {
    __typename
    ...ScheduleInfoV2
  }
  schedulingContact
  schedulingSystemType {
    __typename
    ...KeyValueInfo
  }
  sourceType
  status
  taxExempt
  timezone
  unloadFromType {
    __typename
    ...KeyValueInfo
  }
}
fragment FacilityNoteInfo on FacilityNote {
  __typename
  createdAt
  id
  noteType
  noteableId
  noteableType
  text
  updatedAt
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment ScheduleEntryInfoV2 on ScheduleEntryV2 {
  __typename
  closed
  hours {
    __typename
    ...ScheduleRangeInfoV2
  }
  id
}
fragment ScheduleInfoV2 on ScheduleV2 {
  __typename
  appointmentType
  dropType
  friday {
    __typename
    ...ScheduleEntryInfoV2
  }
  id
  loadSize {
    __typename
    ...KeyValueInfo
  }
  loadSizeId
  modeType
  monday {
    __typename
    ...ScheduleEntryInfoV2
  }
  routeTransportMode {
    __typename
    ...KeyValueInfo
  }
  routeTransportModeId
  saturday {
    __typename
    ...ScheduleEntryInfoV2
  }
  scheduleType
  scheduleTypeNullable
  serviceType
  serviceType
  sunday {
    __typename
    ...ScheduleEntryInfoV2
  }
  thursday {
    __typename
    ...ScheduleEntryInfoV2
  }
  trailerType {
    __typename
    ...KeyValueInfo
  }
  trailerTypeId
  trailerTypeIdNullable
  trailerTypeNullable {
    __typename
    ...KeyValueInfo
  }
  tuesday {
    __typename
    ...ScheduleEntryInfoV2
  }
  wednesday {
    __typename
    ...ScheduleEntryInfoV2
  }
  workType
}
fragment ScheduleRangeInfoV2 on ScheduleRangeV2 {
  __typename
  endOffsetMs
  id
  startOffsetMs
}
fragment TrackingSystemInfo on TrackingSystem {
  __typename
  displayName
  id
}
query getDriverAssignmentByRouteID($routeID: ID!) {
  driverAssignmentForRoute(routeID: $routeID) {
    __typename
    ...DriverAssignmentInfo
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
&quot;routeID&quot;:&quot;${routeID}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getQuery" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getQuery.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">RouteId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>502.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getQuery" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query getQuery($id: ID!) { routeV2(id: $id) { activeRouteVendors { vendorV2 { code id name status } vendorType } businessUnit code dimensions { height(unit: ft) { unit value } length(unit: ft) { unit value } width(unit: ft) { unit value } } division freightAssignmentInboundRegion freightAssignmentOutboundRegion id lifeCycleStatus load { id orders { code customerV2 { code } customerId customerOrderNumber division requirements { option { name } } scac transportMode { name } } } maxCost { maxCost overMax } requirements { option { name } } routeType routeVendors { id routeVendorReferences { id routeVendorReferenceTypeV2 updatedByUserV2 { email } value } } sequence size { name } stops { address { city country geopoint { lat lon } postalCode state street1 street2 } availableStart { timezone value } commodities { actualClass { name } actualDimensionsV2 { height(unit: &quot;&quot;) { unit value } length(unit: &quot;&quot;) { unit value } width(unit: &quot;&quot;) { unit value } } actualPieces actualWeightV2 { unit value } bottomLoadable description expectedClass { name } expectedDensityV2 { unit value } expectedDimensionsV2 { height(unit: &quot;&quot;) { unit value } length(unit: &quot;&quot;) { unit value } width(unit: &quot;&quot;) { unit value } } expectedLinearV2 { unit value } expectedNMFCCode expectedPieces expectedWeightV2 { unit value } hazmat hazmatClass { name } hazmatPackagingGroup id loadOnType { name } maximumTemperatureV2 { unit value } minimumTemperatureV2 { unit value } packagingCount packagingType { name } preCoolToV2 { unit value } stccCode temperatureControlled temperatureSetting topLoadable } computedCurrentAppointment { confirmed requestedEnd { timezone value } requestedStart { timezone value } requestedTimeRange { endOffsetMs startOffsetMs } status } distanceToNext(unit: mi) { unit value } facilityV2 { code facilityIdentifiers { code facilityIdentifierType { active name } } facilityType { name } name } id liveType loadStopType region { name } requirements { option { name } } stopEventsV2 { eventSubTypeDatetime eventSubTypeID eventSubTypeTimezone eventTypeID } type } totalDistance(unit: mi) { unit value } trailerTypes { name } transportMode { name } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;id&quot;: &quot;${RouteId}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getQuery($id: ID!) {
  routeV2(id: $id) {
    activeRouteVendors {
      vendorV2 {
        code
        id
        name
        status
      }
      vendorType
    }
    businessUnit
    code
    dimensions {
      height(unit: ft) {
        unit
        value
      }
      length(unit: ft) {
        unit
        value
      }
      width(unit: ft) {
        unit
        value
      }
    }
    division
    freightAssignmentInboundRegion
    freightAssignmentOutboundRegion
    id
    lifeCycleStatus
    load {
      id
      orders {
        code
        customerV2 {
          code
        }
        customerId
        customerOrderNumber
        division
        requirements {
          option {
            name
          }
        }
        scac
        transportMode {
          name
        }
      }
    }
    maxCost {
      maxCost
      overMax
    }
    requirements {
      option {
        name
      }
    }
    routeType
    routeVendors {
      id
      routeVendorReferences {
        id
        routeVendorReferenceTypeV2
        updatedByUserV2 {
          email
        }
        value
      }
    }
    sequence
    size {
      name
    }
    stops {
      address {
        city
        country
        geopoint {
          lat
          lon
        }
        postalCode
        state
        street1
        street2
      }
      availableStart {
        timezone
        value
      }
      commodities {
        actualClass {
          name
        }
        actualDimensionsV2 {
          height(unit: &quot;&quot;) {
            unit
            value
          }
          length(unit: &quot;&quot;) {
            unit
            value
          }
          width(unit: &quot;&quot;) {
            unit
            value
          }
        }
        actualPieces
        actualWeightV2 {
          unit
          value
        }
        bottomLoadable
        description
        expectedClass {
          name
        }
        expectedDensityV2 {
          unit
          value
        }
        expectedDimensionsV2 {
          height(unit: &quot;&quot;) {
            unit
            value
          }
          length(unit: &quot;&quot;) {
            unit
            value
          }
          width(unit: &quot;&quot;) {
            unit
            value
          }
        }
        expectedLinearV2 {
          unit
          value
        }
        expectedNMFCCode
        expectedPieces
        expectedWeightV2 {
          unit
          value
        }
        hazmat
        hazmatClass {
          name
        }
        hazmatPackagingGroup
        id
        loadOnType {
          name
        }
        maximumTemperatureV2 {
          unit
          value
        }
        minimumTemperatureV2 {
          unit
          value
        }
        packagingCount
        packagingType {
          name
        }
        preCoolToV2 {
          unit
          value
        }
        stccCode
        temperatureControlled
        temperatureSetting
        topLoadable
      }
      computedCurrentAppointment {
        confirmed
        requestedEnd {
          timezone
          value
        }
        requestedStart {
          timezone
          value
        }
        requestedTimeRange {
          endOffsetMs
          startOffsetMs
        }
        status
      }
      distanceToNext(unit: mi) {
        unit
        value
      }
      facilityV2 {
        code
        facilityIdentifiers {
          code
          facilityIdentifierType {
            active
            name
          }
        }
        facilityType {
          name
        }
        name
      }
      id
      liveType
      loadStopType
      region {
        name
      }
      requirements {
        option {
          name
        }
      }
      stopEventsV2 {
        eventSubTypeDatetime
        eventSubTypeID
        eventSubTypeTimezone
        eventTypeID
      }
      type
    }
    totalDistance(unit: mi) {
      unit
      value
    }
    trailerTypes {
      name
    }
    transportMode {
      name
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot;: &quot;${RouteId}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getEmployeeGroupByIDV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getEmployeeGroupByIDV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>783.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getEmployeeGroupByIDV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } query getEmployeeGroupByIDV2($id: ID!) { employeeV2(id: $id) { __typename employeeGroup { __typename ...KeyValueInfo } id } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;id&quot; : &quot;${id}&quot;
	}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
query getEmployeeGroupByIDV2($id: ID!) {
  employeeV2(id: $id) {
    __typename
    employeeGroup {
      __typename
      ...KeyValueInfo
    }
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot; : &quot;${id}&quot;
	}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="employeeV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/employee.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">employeeId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>528.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="employeeV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;employeeId&quot; : &quot;${employeeId}&quot;
	},&quot;query&quot;:&quot;query employF1eeV2($employeeId: ID!) {\n  employeeV2(id: $employeeId) {\n    id\n    userId\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query employF1eeV2($employeeId: ID!) {
  employeeV2(id: $employeeId) {
    id
    userId
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;employeeId&quot; : &quot;${employeeId}&quot;
	}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="allCustomersForCustomerPickerV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/allCustomersForCustomerPickerV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">name,sort</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>75.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="allCustomersForCustomerPickerV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment CustomerPickerItemV2 on CustomerV2 { __typename code currencyId customerStatusType { __typename id name } id mainAddress { __typename city id state } name } query allCustomersForCustomerPickerV2($filter: CustomersFilterV2, $first: Int) { allCustomersV2(filter: $filter, first: $first) { __typename edges { __typename cursor node { __typename ...CustomerPickerItemV2 } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filter&quot;: {
		&quot;name&quot;: &quot;${name}&quot;,
		&quot;sort&quot;: &quot;${sort}&quot;
	},
	&quot;first&quot;: 100
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment CustomerPickerItemV2 on CustomerV2 {
  __typename
  code
  currencyId
  customerStatusType {
    __typename
    id
    name
  }
  id
  mainAddress {
    __typename
    city
    id
    state
  }
  name
}
query allCustomersForCustomerPickerV2($filter: CustomersFilterV2, $first: Int) {
  allCustomersV2(filter: $filter, first: $first) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...CustomerPickerItemV2
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filter&quot;: {
		&quot;name&quot;: &quot;${name}&quot;,
		&quot;sort&quot;: &quot;${sort}&quot;
	},
	&quot;first&quot;: 100
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="allCustomersV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/allCustomersV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">name,sort</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>39.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="allCustomersV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query Query($allCustomersFilter: CustomersFilterV2) { allCustomersV2(filter: $allCustomersFilter) { edges { node { code id name } } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;allCustomersFilter&quot;: {
		&quot;name&quot;: &quot;${name}&quot;,
		&quot;sort&quot;: &quot;${sort}&quot;
	},
	&quot;first&quot;: 100
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query Query($allCustomersFilter: CustomersFilterV2) {
  allCustomersV2(filter: $allCustomersFilter) {
    edges {
      node {
        code
        id
        name
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;allCustomersFilter&quot;: {
		&quot;name&quot;: &quot;${name}&quot;,
		&quot;sort&quot;: &quot;${sort}&quot;
	},
	&quot;first&quot;: 100
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="carrier" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/carrier.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">carrierId</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>531.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="carrier" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query carrierV2($carrierId: ID!) { carrierV2(id: $carrierId) { code contacts { id main } id } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;carrierId&quot; :&quot;${carrierId}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query carrierV2($carrierId: ID!) {
  carrierV2(id: $carrierId) {
    code
    contacts {
      id
      main
    }
    id
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;carrierId&quot; :&quot;${carrierId}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getCarrierByID" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getCarrierByID.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>448.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCarrierByID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment AddressBrief on CarrierAddress { __typename addressType { __typename ...KeyValueInfo } addressTypeId carrierId city country geopoint { __typename lat lon } id isVerified main postalCode riskInfoSource state street1 street2 thirdPartyId } fragment CarrierAuditsExternalStatusInfo on CarrierAuditsExternalStatusV2 { __typename createdAt createdByEmployee { __typename employeeDisplayName id } currentValue { __typename externalStatus nonCertifiedReasons riskInfoSource status } id previousValue { __typename externalStatus nonCertifiedReasons riskInfoSource status } } fragment CarrierByIdInfo on CarrierV2 { __typename addresses { __typename ...AddressBrief } binQualified carrierAuditsExternalStatus { __typename ...CarrierAuditsExternalStatusInfo } carrierIdentifiers { __typename ...CarrierIdentifierInfo } carrierSalesProgressType { __typename id name } contacts { __typename ...ContactInfo } insurances { __typename ...CarrierInsuranceInfo } level { __typename id name } opportunity { __typename id name } parent { __typename id name } releaseMethods { __typename ...ReleaseMethodInfoV1 } reps { __typename ...RepInfo } roeStatus setting { __typename ...CarrierSettingInfo } standing { __typename ...CarrierStandingInfo } w9CertifiedNullable ...CarrierInfo } fragment CarrierCustomerRelationshipInfo on CarrierCustomerRelationshipV2 { __typename active bypassCompliance canLoad carrier { __typename code id name } createdAt createdBy { __typename employee { __typename firstName id lastName } } customer { __typename id name } id notes { __typename id noteType text } relationshipType updatedAt updatedBy { __typename employee { __typename firstName id lastName } } } fragment CarrierIdentifierInfo on CarrierIdentifierV2 { __typename carrierIdentifierTypeId code id link } fragment CarrierInfo on CarrierV2 { __typename accountingNotes { __typename ...NoteInfo } accountingStatus addresses { __typename ...AddressBrief } carrierIdentifiers { __typename ...CarrierIdentifierInfo } carrierPaymentTermId code confirmationNotes { __typename ...NoteInfo } contacts { __typename ...ContactInfo } currencyId customerRelationships { __typename ...CarrierCustomerRelationshipInfo } dbaName descendantIds dotNumber dunsNumber electronicTrackingMethod { __typename ...KeyValueInfo } electronicTrackingType { __typename ...KeyValueInfo } entityType externalStatus id insurances { __typename ...CarrierInsuranceInfo } invoiceDistributionMethodId mainAddress { __typename ...AddressBrief } manualTrackingInformation manualTrackingMethod mcNumber name notes operatingStatus parent { __typename code id name } paymentMethodId phoneNumber remitToCarrier { __typename code id name } remittanceAddress { __typename id } remittanceEmail remittanceGrouping reps { __typename ...RepInfo } safetyRating scacNumber standing { __typename ...CarrierStandingInfo } status } fragment CarrierInsuranceInfo on CarrierInsuranceV2 { __typename cancelDate carrierInsuranceTypeId effectiveDate exemptions expirationDate id identification insurer limit producer rmisCovgId underwriterRating } fragment CarrierSettingInfo on CarrierSettingV2 { __typename carrierId defaultDestinationDeadhead { __typename asMiles asRoundedMiles } defaultDestinationText defaultOriginDeadhead { __typename asMiles asRoundedMiles } defaultTrailerLength defaultTrailerLengthUnit defaultTrailerTypeId id intrastate } fragment CarrierStandingInfo on CarrierStandingV2 { __typename notes reasonCodeId statusTypeId typeId updatedAt updatedByUser { __typename employee { __typename fullName id } id } } fragment ContactInfo on CarrierContact { __typename chatType { __typename ...KeyValueInfo } chatTypeId chatUsername contactTypeId emailAddress extension faxNumber id main main name phoneNumber riskInfoSource thirdPartyId } fragment EmployeeInfo on EmployeeV2 { __typename companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimple } managerId middleName mobilePhone nickname personalEmail phoneNumber relationship slackName subRegion termDate title userId } fragment EmployeeSimple on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } fragment NoteInfo on CarrierNote { __typename createdAt id noteType carrierId text updatedAt } fragment ReleaseMethodInfoV1 on CarrierReleaseMethod { __typename id isReleaseNeeded releaseMethodKey } fragment RepInfo on RepV2 { __typename employee { __typename ...EmployeeInfo } id isLoadRep main repType } query getCarrierByID($id: ID!) { carrierV2(id: $id) { __typename ...CarrierByIdInfo } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;id&quot; :&quot;${id}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment AddressBrief on CarrierAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  carrierId
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment CarrierAuditsExternalStatusInfo on CarrierAuditsExternalStatusV2 {
  __typename
  createdAt
  createdByEmployee {
    __typename
    employeeDisplayName
    id
  }
  currentValue {
    __typename
    externalStatus
    nonCertifiedReasons
    riskInfoSource
    status
  }
  id
  previousValue {
    __typename
    externalStatus
    nonCertifiedReasons
    riskInfoSource
    status
  }
}
fragment CarrierByIdInfo on CarrierV2 {
  __typename
  addresses {
    __typename
    ...AddressBrief
  }
  binQualified
  carrierAuditsExternalStatus {
    __typename
    ...CarrierAuditsExternalStatusInfo
  }
  carrierIdentifiers {
    __typename
    ...CarrierIdentifierInfo
  }
  carrierSalesProgressType {
    __typename
    id
    name
  }
  contacts {
    __typename
    ...ContactInfo
  }
  insurances {
    __typename
    ...CarrierInsuranceInfo
  }
  level {
    __typename
    id
    name
  }
  opportunity {
    __typename
    id
    name
  }
  parent {
    __typename
    id
    name
  }
  releaseMethods {
    __typename
    ...ReleaseMethodInfoV1
  }
  reps {
    __typename
    ...RepInfo
  }
  roeStatus
  setting {
    __typename
    ...CarrierSettingInfo
  }
  standing {
    __typename
    ...CarrierStandingInfo
  }
  w9CertifiedNullable
  ...CarrierInfo
}
fragment CarrierCustomerRelationshipInfo on CarrierCustomerRelationshipV2 {
  __typename
  active
  bypassCompliance
  canLoad
  carrier {
    __typename
    code
    id
    name
  }
  createdAt
  createdBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
  customer {
    __typename
    id
    name
  }
  id
  notes {
    __typename
    id
    noteType
    text
  }
  relationshipType
  updatedAt
  updatedBy {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
  }
}
fragment CarrierIdentifierInfo on CarrierIdentifierV2 {
  __typename
  carrierIdentifierTypeId
  code
  id
  link
}
fragment CarrierInfo on CarrierV2 {
  __typename
  accountingNotes {
    __typename
    ...NoteInfo
  }
  accountingStatus
  addresses {
    __typename
    ...AddressBrief
  }
  carrierIdentifiers {
    __typename
    ...CarrierIdentifierInfo
  }
  carrierPaymentTermId
  code
  confirmationNotes {
    __typename
    ...NoteInfo
  }
  contacts {
    __typename
    ...ContactInfo
  }
  currencyId
  customerRelationships {
    __typename
    ...CarrierCustomerRelationshipInfo
  }
  dbaName
  descendantIds
  dotNumber
  dunsNumber
  electronicTrackingMethod {
    __typename
    ...KeyValueInfo
  }
  electronicTrackingType {
    __typename
    ...KeyValueInfo
  }
  entityType
  externalStatus
  id
  insurances {
    __typename
    ...CarrierInsuranceInfo
  }
  invoiceDistributionMethodId
  mainAddress {
    __typename
    ...AddressBrief
  }
  manualTrackingInformation
  manualTrackingMethod
  mcNumber
  name
  notes
  operatingStatus
  parent {
    __typename
    code
    id
    name
  }
  paymentMethodId
  phoneNumber
  remitToCarrier {
    __typename
    code
    id
    name
  }
  remittanceAddress {
    __typename
    id
  }
  remittanceEmail
  remittanceGrouping
  reps {
    __typename
    ...RepInfo
  }
  safetyRating
  scacNumber
  standing {
    __typename
    ...CarrierStandingInfo
  }
  status
}
fragment CarrierInsuranceInfo on CarrierInsuranceV2 {
  __typename
  cancelDate
  carrierInsuranceTypeId
  effectiveDate
  exemptions
  expirationDate
  id
  identification
  insurer
  limit
  producer
  rmisCovgId
  underwriterRating
}
fragment CarrierSettingInfo on CarrierSettingV2 {
  __typename
  carrierId
  defaultDestinationDeadhead {
    __typename
    asMiles
    asRoundedMiles
  }
  defaultDestinationText
  defaultOriginDeadhead {
    __typename
    asMiles
    asRoundedMiles
  }
  defaultTrailerLength
  defaultTrailerLengthUnit
  defaultTrailerTypeId
  id
  intrastate
}
fragment CarrierStandingInfo on CarrierStandingV2 {
  __typename
  notes
  reasonCodeId
  statusTypeId
  typeId
  updatedAt
  updatedByUser {
    __typename
    employee {
      __typename
      fullName
      id
    }
    id
  }
}
fragment ContactInfo on CarrierContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment EmployeeInfo on EmployeeV2 {
  __typename
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimple
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimple on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment NoteInfo on CarrierNote {
  __typename
  createdAt
  id
  noteType
  carrierId
  text
  updatedAt
}
fragment ReleaseMethodInfoV1 on CarrierReleaseMethod {
  __typename
  id
  isReleaseNeeded
  releaseMethodKey
}
fragment RepInfo on RepV2 {
  __typename
  employee {
    __typename
    ...EmployeeInfo
  }
  id
  isLoadRep
  main
  repType
}
query getCarrierByID($id: ID!) {
  carrierV2(id: $id) {
    __typename
    ...CarrierByIdInfo
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot; :&quot;${id}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="carrierByCode" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/carrierByCodeV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">code,id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>255.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="carrierByCode" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query carrierByCodeV2($input: CarrierArgumentInputV2!) { carrierNullableV2(carrier: $input) { addresses { addressTypeId city country createdAt createdByUser { id } id main postalCode state street1 street2 updatedAt updatedByUser { id } } carrierIdentifiers { carrierIdentifierTypeId code id } carrierServices { carrierServiceTypeId createdAt createdByUser { id } id note updatedAt updatedByUser { id } } certifications { carrierCertificationTypeId createdAt createdByUser { id } expirationDate id note updatedAt updatedByUser { id } } code contacts { active contactTypeId createdAt createdByUser { id } emailAddress extension faxNumber id main name phoneNumber updatedAt updatedByUser { id } } createdAt createdByUser { id } dbaName dotNumber electronicTrackingMethod { id } electronicTrackingType { id } entityType geographiesNullable { createdAt createdByUser { id } geography { country createdAt createdByUser { id } state updatedAt updatedByUser { id } } updatedAt updatedByUser { id } } id insurances { carrierInsuranceTypeId createdAt createdByUser { id } effectiveDate exemptions expirationDate id identification insurer limit producer updatedAt updatedByUser { id } } intrastateStates levelId mcNumber name notes operatingStatus opportunityId parent { code id } phoneNumber remitToCarrier { carrierPaymentTermId code currencyId id invoiceDistributionMethodId paymentMethodId remittanceEmail tempRemittanceGrouping } remittanceAddress { addressTypeId city country id main postalCode state street1 street2 } reps { createdAt createdByUser { id } employee { employeeId id } id isLoadRep main repType updatedAt updatedByUser { id } } safetyRating scacNumber standing { createdAt createdByUser { id } notes reasonCodeId statusTypeId typeId updatedAt updatedByUser { id } } updatedAt updatedByUser { id } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;input&quot;:
	{
		&quot;code&quot;:&quot;${code}&quot;,
		&quot;id&quot;:&quot;${id}&quot;
	}
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query carrierByCodeV2($input: CarrierArgumentInputV2!) {
  carrierNullableV2(carrier: $input) {
    addresses {
      addressTypeId
      city
      country
      createdAt
      createdByUser {
        id
      }
      id
      main
      postalCode
      state
      street1
      street2
      updatedAt
      updatedByUser {
        id
      }
    }
    carrierIdentifiers {
      carrierIdentifierTypeId
      code
      id
    }
    carrierServices {
      carrierServiceTypeId
      createdAt
      createdByUser {
        id
      }
      id
      note
      updatedAt
      updatedByUser {
        id
      }
    }
    certifications {
      carrierCertificationTypeId
      createdAt
      createdByUser {
        id
      }
      expirationDate
      id
      note
      updatedAt
      updatedByUser {
        id
      }
    }
    code
    contacts {
      active
      contactTypeId
      createdAt
      createdByUser {
        id
      }
      emailAddress
      extension
      faxNumber
      id
      main
      name
      phoneNumber
      updatedAt
      updatedByUser {
        id
      }
    }
    createdAt
    createdByUser {
      id
    }
    dbaName
    dotNumber
    electronicTrackingMethod {
      id
    }
    electronicTrackingType {
      id
    }
    entityType
    geographiesNullable {
      createdAt
      createdByUser {
        id
      }
      geography {
        country
        createdAt
        createdByUser {
          id
        }
        state
        updatedAt
        updatedByUser {
          id
        }
      }
      updatedAt
      updatedByUser {
        id
      }
    }
    id
    insurances {
      carrierInsuranceTypeId
      createdAt
      createdByUser {
        id
      }
      effectiveDate
      exemptions
      expirationDate
      id
      identification
      insurer
      limit
      producer
      updatedAt
      updatedByUser {
        id
      }
    }
    intrastateStates
    levelId
    mcNumber
    name
    notes
    operatingStatus
    opportunityId
    parent {
      code
      id
    }
    phoneNumber
    remitToCarrier {
      carrierPaymentTermId
      code
      currencyId
      id
      invoiceDistributionMethodId
      paymentMethodId
      remittanceEmail
      tempRemittanceGrouping
    }
    remittanceAddress {
      addressTypeId
      city
      country
      id
      main
      postalCode
      state
      street1
      street2
    }
    reps {
      createdAt
      createdByUser {
        id
      }
      employee {
        employeeId
        id
      }
      id
      isLoadRep
      main
      repType
      updatedAt
      updatedByUser {
        id
      }
    }
    safetyRating
    scacNumber
    standing {
      createdAt
      createdByUser {
        id
      }
      notes
      reasonCodeId
      statusTypeId
      typeId
      updatedAt
      updatedByUser {
        id
      }
    }
    updatedAt
    updatedByUser {
      id
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot;:
	{
		&quot;code&quot;:&quot;${code}&quot;,
		&quot;id&quot;:&quot;${id}&quot;
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="searchCarriers" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>289.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="searchCarriers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment CarrierInfoSearchPage on CarrierV2 { __typename carrierServices { __typename carrierServiceType { __typename id name } id } certifications { __typename carrierCertificationType { __typename id name } id } code dotNumber id levelId mainAddress { __typename city id state } mcNumber name opportunity { __typename id name } reps { __typename employee { __typename firstName id lastName } id main } scacNumber status } query searchCarriers($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) { carriersNullableV2( after: $after before: $before filter: $filter first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...CarrierInfoSearchPage } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment CarrierInfoSearchPage on CarrierV2 {
  __typename
  carrierServices {
    __typename
    carrierServiceType {
      __typename
      id
      name
    }
    id
  }
  certifications {
    __typename
    carrierCertificationType {
      __typename
      id
      name
    }
    id
  }
  code
  dotNumber
  id
  levelId
  mainAddress {
    __typename
    city
    id
    state
  }
  mcNumber
  name
  opportunity {
    __typename
    id
    name
  }
  reps {
    __typename
    employee {
      __typename
      firstName
      id
      lastName
    }
    id
    main
  }
  scacNumber
  status
}
query searchCarriers($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) {
  carriersNullableV2(
    after: $after
    before: $before
    filter: $filter
    first: $first
    last: $last
  ) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...CarrierInfoSearchPage
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="searchCarriersCarrierBrief" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>60.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="searchCarriersCarrierBrief" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment AddressBrief on CarrierAddress { __typename addressType { __typename ...KeyValueInfo } addressTypeId carrierId city country geopoint { __typename lat lon } id isVerified main postalCode riskInfoSource state street1 street2 thirdPartyId } fragment CarrierBrief on CarrierV2 { __typename addresses { __typename ...AddressBrief } carrierServices { __typename carrierServiceType { __typename id name } id } certifications { __typename carrierCertificationType { __typename id name } } code contacts { __typename ...ContactInfo } dotNumber electronicTrackingType { __typename id name } entityType id insurances { __typename ...CarrierInsuranceInfo } levelId mainAddress { __typename ...AddressBrief } mcNumber name opportunity { __typename id name } phoneNumber reps { __typename ...RepInfo } scacNumber status } fragment CarrierInsuranceInfo on CarrierInsuranceV2 { __typename cancelDate carrierInsuranceTypeId effectiveDate exemptions expirationDate id identification insurer limit producer rmisCovgId underwriterRating } fragment ContactInfo on CarrierContact { __typename chatType { __typename ...KeyValueInfo } chatTypeId chatUsername contactTypeId emailAddress extension faxNumber id main main name phoneNumber riskInfoSource thirdPartyId } fragment EmployeeInfo on EmployeeV2 { __typename companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimple } managerId middleName mobilePhone nickname personalEmail phoneNumber relationship slackName subRegion termDate title userId } fragment EmployeeSimple on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } fragment RepInfo on RepV2 { __typename employee { __typename ...EmployeeInfo } id isLoadRep main repType } query searchCarriersCarrierBrief($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) { carriersNullableV2( after: $after before: $before filter: $filter first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...CarrierBrief } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment AddressBrief on CarrierAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  carrierId
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment CarrierBrief on CarrierV2 {
  __typename
  addresses {
    __typename
    ...AddressBrief
  }
  carrierServices {
    __typename
    carrierServiceType {
      __typename
      id
      name
    }
    id
  }
  certifications {
    __typename
    carrierCertificationType {
      __typename
      id
      name
    }
  }
  code
  contacts {
    __typename
    ...ContactInfo
  }
  dotNumber
  electronicTrackingType {
    __typename
    id
    name
  }
  entityType
  id
  insurances {
    __typename
    ...CarrierInsuranceInfo
  }
  levelId
  mainAddress {
    __typename
    ...AddressBrief
  }
  mcNumber
  name
  opportunity {
    __typename
    id
    name
  }
  phoneNumber
  reps {
    __typename
    ...RepInfo
  }
  scacNumber
  status
}
fragment CarrierInsuranceInfo on CarrierInsuranceV2 {
  __typename
  cancelDate
  carrierInsuranceTypeId
  effectiveDate
  exemptions
  expirationDate
  id
  identification
  insurer
  limit
  producer
  rmisCovgId
  underwriterRating
}
fragment ContactInfo on CarrierContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment EmployeeInfo on EmployeeV2 {
  __typename
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimple
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimple on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment RepInfo on RepV2 {
  __typename
  employee {
    __typename
    ...EmployeeInfo
  }
  id
  isLoadRep
  main
  repType
}
query searchCarriersCarrierBrief($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) {
  carriersNullableV2(
    after: $after
    before: $before
    filter: $filter
    first: $first
    last: $last
  ) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...CarrierBrief
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getCarriersNullable" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>80.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getCarriersNullable" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment AddressBrief on CarrierAddress { __typename addressType { __typename ...KeyValueInfo } addressTypeId carrierId city country geopoint { __typename lat lon } id isVerified main postalCode riskInfoSource state street1 street2 thirdPartyId } fragment CarrierBrief on CarrierV2 { __typename addresses { __typename ...AddressBrief } carrierServices { __typename carrierServiceType { __typename id name } id } certifications { __typename carrierCertificationType { __typename id name } } code contacts { __typename ...ContactInfo } dotNumber electronicTrackingType { __typename id name } entityType id insurances { __typename ...CarrierInsuranceInfo } levelId mainAddress { __typename ...AddressBrief } mcNumber name opportunity { __typename id name } phoneNumber reps { __typename ...RepInfo } scacNumber status } fragment CarrierInsuranceInfo on CarrierInsuranceV2 { __typename cancelDate carrierInsuranceTypeId effectiveDate exemptions expirationDate id identification insurer limit producer rmisCovgId underwriterRating } fragment ContactInfo on CarrierContact { __typename chatType { __typename ...KeyValueInfo } chatTypeId chatUsername contactTypeId emailAddress extension faxNumber id main main name phoneNumber riskInfoSource thirdPartyId } fragment EmployeeInfo on EmployeeV2 { __typename companyEmail division { __typename ...KeyValueInfo } divisionId email emergencyContact emergencyPhone employeeCompanyLevelId employeeDepartmentId employeeDepartmentLevelId employeeDisplayName employeeGenderId employeeGroup { __typename ...KeyValueInfo } employeeGroupId employeeId employeeOffice { __typename ...KeyValueInfo } employeeOfficeId employeeRoleId employeeShirtSizeId employeeStatus { __typename active id } employeeSuffixId employeeTimeId employeeTypeId ext firstName firstNameDotLastName fullName hireDate id lastName manager { __typename ...EmployeeSimple } managerId middleName mobilePhone nickname personalEmail phoneNumber relationship slackName subRegion termDate title userId } fragment EmployeeSimple on EmployeeV2 { __typename companyEmail email emergencyContact emergencyPhone employeeDepartmentId employeeDisplayName employeeGenderId employeeGroupId employeeId employeeOfficeId employeeSuffixId ext firstName fullName id lastName managerId middleName nickname personalEmail phoneNumber relationship title userId } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } fragment RepInfo on RepV2 { __typename employee { __typename ...EmployeeInfo } id isLoadRep main repType } query searchCarriersCarrierBrief($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) { carriersNullableV2( after: $after before: $before filter: $filter first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...CarrierBrief } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment AddressBrief on CarrierAddress {
  __typename
  addressType {
    __typename
    ...KeyValueInfo
  }
  addressTypeId
  carrierId
  city
  country
  geopoint {
    __typename
    lat
    lon
  }
  id
  isVerified
  main
  postalCode
  riskInfoSource
  state
  street1
  street2
  thirdPartyId
}
fragment CarrierBrief on CarrierV2 {
  __typename
  addresses {
    __typename
    ...AddressBrief
  }
  carrierServices {
    __typename
    carrierServiceType {
      __typename
      id
      name
    }
    id
  }
  certifications {
    __typename
    carrierCertificationType {
      __typename
      id
      name
    }
  }
  code
  contacts {
    __typename
    ...ContactInfo
  }
  dotNumber
  electronicTrackingType {
    __typename
    id
    name
  }
  entityType
  id
  insurances {
    __typename
    ...CarrierInsuranceInfo
  }
  levelId
  mainAddress {
    __typename
    ...AddressBrief
  }
  mcNumber
  name
  opportunity {
    __typename
    id
    name
  }
  phoneNumber
  reps {
    __typename
    ...RepInfo
  }
  scacNumber
  status
}
fragment CarrierInsuranceInfo on CarrierInsuranceV2 {
  __typename
  cancelDate
  carrierInsuranceTypeId
  effectiveDate
  exemptions
  expirationDate
  id
  identification
  insurer
  limit
  producer
  rmisCovgId
  underwriterRating
}
fragment ContactInfo on CarrierContact {
  __typename
  chatType {
    __typename
    ...KeyValueInfo
  }
  chatTypeId
  chatUsername
  contactTypeId
  emailAddress
  extension
  faxNumber
  id
  main
  main
  name
  phoneNumber
  riskInfoSource
  thirdPartyId
}
fragment EmployeeInfo on EmployeeV2 {
  __typename
  companyEmail
  division {
    __typename
    ...KeyValueInfo
  }
  divisionId
  email
  emergencyContact
  emergencyPhone
  employeeCompanyLevelId
  employeeDepartmentId
  employeeDepartmentLevelId
  employeeDisplayName
  employeeGenderId
  employeeGroup {
    __typename
    ...KeyValueInfo
  }
  employeeGroupId
  employeeId
  employeeOffice {
    __typename
    ...KeyValueInfo
  }
  employeeOfficeId
  employeeRoleId
  employeeShirtSizeId
  employeeStatus {
    __typename
    active
    id
  }
  employeeSuffixId
  employeeTimeId
  employeeTypeId
  ext
  firstName
  firstNameDotLastName
  fullName
  hireDate
  id
  lastName
  manager {
    __typename
    ...EmployeeSimple
  }
  managerId
  middleName
  mobilePhone
  nickname
  personalEmail
  phoneNumber
  relationship
  slackName
  subRegion
  termDate
  title
  userId
}
fragment EmployeeSimple on EmployeeV2 {
  __typename
  companyEmail
  email
  emergencyContact
  emergencyPhone
  employeeDepartmentId
  employeeDisplayName
  employeeGenderId
  employeeGroupId
  employeeId
  employeeOfficeId
  employeeSuffixId
  ext
  firstName
  fullName
  id
  lastName
  managerId
  middleName
  nickname
  personalEmail
  phoneNumber
  relationship
  title
  userId
}
fragment KeyValueInfo on KeyValue {
  __typename
  active
  id
  metadataJson
  name
}
fragment RepInfo on RepV2 {
  __typename
  employee {
    __typename
    ...EmployeeInfo
  }
  id
  isLoadRep
  main
  repType
}
query searchCarriersCarrierBrief($after: String, $before: String, $filter: CarriersFilterV2, $first: Int, $last: Int) {
  carriersNullableV2(
    after: $after
    before: $before
    filter: $filter
    first: $first
    last: $last
  ) {
    __typename
    edges {
      __typename
      cursor
      node {
        __typename
        ...CarrierBrief
      }
    }
    pageInfo {
      __typename
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="facilityByCodeV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/facilityByCodeV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">code</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>15.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="facilityByCodeV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">query getFacilityByCodeV2($code: String!) { facilityByCodeV2(code: $code) { addresses { addressTypeId city country id main postalCode state street1 street2 } code contacts { contactType { id } emailAddress extension faxNumber id main name phoneNumber } externalNotes { id noteType text } id name notes { id noteType text } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;code&quot;: &quot;${code}&quot;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getFacilityByCodeV2($code: String!) {
  facilityByCodeV2(code: $code) {
    addresses {
      addressTypeId
      city
      country
      id
      main
      postalCode
      state
      street1
      street2
    }
    code
    contacts {
      contactType {
        id
      }
      emailAddress
      extension
      faxNumber
      id
      main
      name
      phoneNumber
    }
    externalNotes {
      id
      noteType
      text
    }
    id
    name
    notes {
      id
      noteType
      text
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;code&quot;: &quot;${code}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="allFacilitiesV2ForFacilityPicker" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/allFacilitiesV2ForFacilityPicker.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">code</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>8.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="allFacilitiesV2ForFacilityPicker" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="query" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">query</stringProp>
                <stringProp name="Argument.value">fragment FacilityAddressBrief on FacilityAddress { __typename addressType { __typename ...KeyValueInfo } addressTypeId addressTypes { __typename id } city country geopoint { __typename lat lon } id isVerified main postalCode riskInfoSource state street1 street2 thirdPartyId } fragment FacilityContactInfo on FacilityContact { __typename chatType { __typename ...KeyValueInfo } chatTypeId chatUsername contactTypeId emailAddress extension faxNumber id main main name phoneNumber riskInfoSource thirdPartyId } fragment FacilityInfoV2ForFacilityPicker on FacilityV2 { __typename addresses { __typename ...FacilityAddressBrief } code contacts { __typename ...FacilityContactInfo } customerFacilities { __typename customerId drop facilityId id isAutoScheduleDefault isAutoScheduleEligible schedulingSystem } externalNotes { __typename ...FacilityNoteInfo } facilityLoadDefaults { __typename autoSchedDefault autoSchedEligible facilityId id schedSystem } facilityNote facilityType { __typename ...KeyValueInfo } id loadFromType { __typename ...KeyValueInfo } mainAddress { __typename ...FacilityAddressBrief } name phoneNumber scaleNote schedules { __typename ...ScheduleInfoV2 } schedulingContact schedulingSystemType { __typename ...KeyValueInfo } sourceType status taxExempt timezone unloadFromType { __typename ...KeyValueInfo } } fragment FacilityNoteInfo on FacilityNote { __typename createdAt id noteType noteableId noteableType text updatedAt } fragment KeyValueInfo on KeyValue { __typename active id metadataJson name } fragment ScheduleEntryInfoV2 on ScheduleEntryV2 { __typename closed hours { __typename ...ScheduleRangeInfoV2 } id } fragment ScheduleInfoV2 on ScheduleV2 { __typename appointmentType dropType friday { __typename ...ScheduleEntryInfoV2 } id loadSize { __typename ...KeyValueInfo } loadSizeId modeType monday { __typename ...ScheduleEntryInfoV2 } routeTransportMode { __typename ...KeyValueInfo } routeTransportModeId saturday { __typename ...ScheduleEntryInfoV2 } scheduleType scheduleTypeNullable serviceType serviceType sunday { __typename ...ScheduleEntryInfoV2 } thursday { __typename ...ScheduleEntryInfoV2 } trailerType { __typename ...KeyValueInfo } trailerTypeId trailerTypeIdNullable trailerTypeNullable { __typename ...KeyValueInfo } tuesday { __typename ...ScheduleEntryInfoV2 } wednesday { __typename ...ScheduleEntryInfoV2 } workType } fragment ScheduleRangeInfoV2 on ScheduleRangeV2 { __typename endOffsetMs id startOffsetMs } query allFacilitiesV2ForFacilityPicker( $after: String $before: String $filter: FacilitiesFilterV2 $first: Int $last: Int ) { allFacilitiesV2( after: $after before: $before filter: $filter first: $first last: $last ) { __typename edges { __typename cursor node { __typename ...FacilityInfoV2ForFacilityPicker } } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">variables</stringProp>
                <stringProp name="Argument.value">{
	&quot;filter&quot;: {
		&quot;code&quot;: &quot;${code}&quot;
	}
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">fragment FacilityAddressBrief on FacilityAddress {
	__typename
	addressType {
		__typename
		...KeyValueInfo
	}
	addressTypeId
	addressTypes {
		__typename
		id
	}
	city
	country
	geopoint {
		__typename
		lat
		lon
	}
	id
	isVerified
	main
	postalCode
	riskInfoSource
	state
	street1
	street2
	thirdPartyId
}
fragment FacilityContactInfo on FacilityContact {
	__typename
	chatType {
		__typename
		...KeyValueInfo
	}
	chatTypeId
	chatUsername
	contactTypeId
	emailAddress
	extension
	faxNumber
	id
	main
	main
	name
	phoneNumber
	riskInfoSource
	thirdPartyId
}
fragment FacilityInfoV2ForFacilityPicker on FacilityV2 {
	__typename
	addresses {
		__typename
		...FacilityAddressBrief
	}
	code
	contacts {
		__typename
		...FacilityContactInfo
	}
	customerFacilities {
		__typename
		customerId
		drop
		facilityId
		id
		isAutoScheduleDefault
		isAutoScheduleEligible
		schedulingSystem
	}
	externalNotes {
		__typename
		...FacilityNoteInfo
	}
	facilityLoadDefaults {
		__typename
		autoSchedDefault
		autoSchedEligible
		facilityId
		id
		schedSystem
	}
	facilityNote
	facilityType {
		__typename
		...KeyValueInfo
	}
	id
	loadFromType {
		__typename
		...KeyValueInfo
	}
	mainAddress {
		__typename
		...FacilityAddressBrief
	}
	name
	phoneNumber
	scaleNote
	schedules {
		__typename
		...ScheduleInfoV2
	}
	schedulingContact
	schedulingSystemType {
		__typename
		...KeyValueInfo
	}
	sourceType
	status
	taxExempt
	timezone
	unloadFromType {
		__typename
		...KeyValueInfo
	}
}
fragment FacilityNoteInfo on FacilityNote {
	__typename
	createdAt
	id
	noteType
	noteableId
	noteableType
	text
	updatedAt
}
fragment KeyValueInfo on KeyValue {
	__typename
	active
	id
	metadataJson
	name
}
fragment ScheduleEntryInfoV2 on ScheduleEntryV2 {
	__typename
	closed
	hours {
		__typename
		...ScheduleRangeInfoV2
	}
	id
}
fragment ScheduleInfoV2 on ScheduleV2 {
	__typename
	appointmentType
	dropType
	friday {
		__typename
		...ScheduleEntryInfoV2
	}
	id
	loadSize {
		__typename
		...KeyValueInfo
	}
	loadSizeId
	modeType
	monday {
		__typename
		...ScheduleEntryInfoV2
	}
	routeTransportMode {
		__typename
		...KeyValueInfo
	}
	routeTransportModeId
	saturday {
		__typename
		...ScheduleEntryInfoV2
	}
	scheduleType
	scheduleTypeNullable
	serviceType
	serviceType
	sunday {
		__typename
		...ScheduleEntryInfoV2
	}
	thursday {
		__typename
		...ScheduleEntryInfoV2
	}
	trailerType {
		__typename
		...KeyValueInfo
	}
	trailerTypeId
	trailerTypeIdNullable
	trailerTypeNullable {
		__typename
		...KeyValueInfo
	}
	tuesday {
		__typename
		...ScheduleEntryInfoV2
	}
	wednesday {
		__typename
		...ScheduleEntryInfoV2
	}
	workType
}
fragment ScheduleRangeInfoV2 on ScheduleRangeV2 {
	__typename
	endOffsetMs
	id
	startOffsetMs
}
query allFacilitiesV2ForFacilityPicker(
	$after: String
	$before: String
	$filter: FacilitiesFilterV2
	$first: Int
	$last: Int
) {
	allFacilitiesV2(
		after: $after
		before: $before
		filter: $filter
		first: $first
		last: $last
	) {
		__typename
		edges {
			__typename
			cursor
			node {
				__typename
				...FacilityInfoV2ForFacilityPicker
			}
		}
		pageInfo {
			__typename
			endCursor
			hasNextPage
			hasPreviousPage
			startCursor
		}
	}
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;filter&quot;: {
		&quot;code&quot;: &quot;${code}&quot;
	}
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="getQueryV2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/swarupa.bagade/Downloads/resources/getQueryV2.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">load_ID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>82.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">300</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getQueryV2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{
	&quot;id&quot; : &quot;${load_ID}&quot;
},&quot;query&quot;:&quot;query getQuery($id: ID!) {\n  loadV2(id: $id) {\n    createdAt\n    createdByV2 {\n      id\n    }\n    id\n    orders {\n      customerV2 {\n        id\n      }\n      id\n    }\n    routes {\n      activeRouteVendors {\n        booked\n        vendorType\n        vendorV2 {\n          id\n        }\n      }\n      createdByUserV2 {\n        id\n      }\n      id\n      sequence\n      updatedByUserV2 {\n        id\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">graphql.dev.mm100.mastermindtms.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query getQuery($id: ID!) {
  loadV2(id: $id) {
    createdAt
    createdByV2 {
      id
    }
    id
    orders {
      customerV2 {
        id
      }
      id
    }
    routes {
      activeRouteVendors {
        booked
        vendorType
        vendorV2 {
          id
        }
      }
      createdByUserV2 {
        id
      }
      id
      sequence
      updatedByUserV2 {
        id
      }
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;id&quot; : &quot;${load_ID}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">&quot;/&quot;</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
